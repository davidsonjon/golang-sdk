/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the ApprovalDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalDto{}

// ApprovalDto Payload for changing the fields of an approval.
type ApprovalDto struct {
	// Object representation of a comment on the approval
	Comments map[string]interface{} `json:"comments,omitempty"`
	// An array of identities who have approved the approval
	ApprovedBy []ApprovalIdentity `json:"approvedBy,omitempty"`
	// An array of identities who have rejected the approval
	RejectedBy []ApprovalIdentity `json:"rejectedBy,omitempty"`
	ReassignFrom *ApprovalIdentity `json:"reassignFrom,omitempty"`
	ReassignTo *ApprovalIdentity `json:"reassignTo,omitempty"`
	// Any additional attributes that the approval request may need
	AdditionalAttributes map[string]interface{} `json:"additionalAttributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalDto ApprovalDto

// NewApprovalDto instantiates a new ApprovalDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalDto() *ApprovalDto {
	this := ApprovalDto{}
	return &this
}

// NewApprovalDtoWithDefaults instantiates a new ApprovalDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalDtoWithDefaults() *ApprovalDto {
	this := ApprovalDto{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ApprovalDto) GetComments() map[string]interface{} {
	if o == nil || IsNil(o.Comments) {
		var ret map[string]interface{}
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetCommentsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Comments) {
		return map[string]interface{}{}, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ApprovalDto) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given map[string]interface{} and assigns it to the Comments field.
func (o *ApprovalDto) SetComments(v map[string]interface{}) {
	o.Comments = v
}

// GetApprovedBy returns the ApprovedBy field value if set, zero value otherwise.
func (o *ApprovalDto) GetApprovedBy() []ApprovalIdentity {
	if o == nil || IsNil(o.ApprovedBy) {
		var ret []ApprovalIdentity
		return ret
	}
	return o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetApprovedByOk() ([]ApprovalIdentity, bool) {
	if o == nil || IsNil(o.ApprovedBy) {
		return nil, false
	}
	return o.ApprovedBy, true
}

// HasApprovedBy returns a boolean if a field has been set.
func (o *ApprovalDto) HasApprovedBy() bool {
	if o != nil && !IsNil(o.ApprovedBy) {
		return true
	}

	return false
}

// SetApprovedBy gets a reference to the given []ApprovalIdentity and assigns it to the ApprovedBy field.
func (o *ApprovalDto) SetApprovedBy(v []ApprovalIdentity) {
	o.ApprovedBy = v
}

// GetRejectedBy returns the RejectedBy field value if set, zero value otherwise.
func (o *ApprovalDto) GetRejectedBy() []ApprovalIdentity {
	if o == nil || IsNil(o.RejectedBy) {
		var ret []ApprovalIdentity
		return ret
	}
	return o.RejectedBy
}

// GetRejectedByOk returns a tuple with the RejectedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetRejectedByOk() ([]ApprovalIdentity, bool) {
	if o == nil || IsNil(o.RejectedBy) {
		return nil, false
	}
	return o.RejectedBy, true
}

// HasRejectedBy returns a boolean if a field has been set.
func (o *ApprovalDto) HasRejectedBy() bool {
	if o != nil && !IsNil(o.RejectedBy) {
		return true
	}

	return false
}

// SetRejectedBy gets a reference to the given []ApprovalIdentity and assigns it to the RejectedBy field.
func (o *ApprovalDto) SetRejectedBy(v []ApprovalIdentity) {
	o.RejectedBy = v
}

// GetReassignFrom returns the ReassignFrom field value if set, zero value otherwise.
func (o *ApprovalDto) GetReassignFrom() ApprovalIdentity {
	if o == nil || IsNil(o.ReassignFrom) {
		var ret ApprovalIdentity
		return ret
	}
	return *o.ReassignFrom
}

// GetReassignFromOk returns a tuple with the ReassignFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetReassignFromOk() (*ApprovalIdentity, bool) {
	if o == nil || IsNil(o.ReassignFrom) {
		return nil, false
	}
	return o.ReassignFrom, true
}

// HasReassignFrom returns a boolean if a field has been set.
func (o *ApprovalDto) HasReassignFrom() bool {
	if o != nil && !IsNil(o.ReassignFrom) {
		return true
	}

	return false
}

// SetReassignFrom gets a reference to the given ApprovalIdentity and assigns it to the ReassignFrom field.
func (o *ApprovalDto) SetReassignFrom(v ApprovalIdentity) {
	o.ReassignFrom = &v
}

// GetReassignTo returns the ReassignTo field value if set, zero value otherwise.
func (o *ApprovalDto) GetReassignTo() ApprovalIdentity {
	if o == nil || IsNil(o.ReassignTo) {
		var ret ApprovalIdentity
		return ret
	}
	return *o.ReassignTo
}

// GetReassignToOk returns a tuple with the ReassignTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetReassignToOk() (*ApprovalIdentity, bool) {
	if o == nil || IsNil(o.ReassignTo) {
		return nil, false
	}
	return o.ReassignTo, true
}

// HasReassignTo returns a boolean if a field has been set.
func (o *ApprovalDto) HasReassignTo() bool {
	if o != nil && !IsNil(o.ReassignTo) {
		return true
	}

	return false
}

// SetReassignTo gets a reference to the given ApprovalIdentity and assigns it to the ReassignTo field.
func (o *ApprovalDto) SetReassignTo(v ApprovalIdentity) {
	o.ReassignTo = &v
}

// GetAdditionalAttributes returns the AdditionalAttributes field value if set, zero value otherwise.
func (o *ApprovalDto) GetAdditionalAttributes() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalAttributes
}

// GetAdditionalAttributesOk returns a tuple with the AdditionalAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDto) GetAdditionalAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalAttributes) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalAttributes, true
}

// HasAdditionalAttributes returns a boolean if a field has been set.
func (o *ApprovalDto) HasAdditionalAttributes() bool {
	if o != nil && !IsNil(o.AdditionalAttributes) {
		return true
	}

	return false
}

// SetAdditionalAttributes gets a reference to the given map[string]interface{} and assigns it to the AdditionalAttributes field.
func (o *ApprovalDto) SetAdditionalAttributes(v map[string]interface{}) {
	o.AdditionalAttributes = v
}

func (o ApprovalDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.ApprovedBy) {
		toSerialize["approvedBy"] = o.ApprovedBy
	}
	if !IsNil(o.RejectedBy) {
		toSerialize["rejectedBy"] = o.RejectedBy
	}
	if !IsNil(o.ReassignFrom) {
		toSerialize["reassignFrom"] = o.ReassignFrom
	}
	if !IsNil(o.ReassignTo) {
		toSerialize["reassignTo"] = o.ReassignTo
	}
	if !IsNil(o.AdditionalAttributes) {
		toSerialize["additionalAttributes"] = o.AdditionalAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalDto) UnmarshalJSON(data []byte) (err error) {
	varApprovalDto := _ApprovalDto{}

	err = json.Unmarshal(data, &varApprovalDto)

	if err != nil {
		return err
	}

	*o = ApprovalDto(varApprovalDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comments")
		delete(additionalProperties, "approvedBy")
		delete(additionalProperties, "rejectedBy")
		delete(additionalProperties, "reassignFrom")
		delete(additionalProperties, "reassignTo")
		delete(additionalProperties, "additionalAttributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalDto struct {
	value *ApprovalDto
	isSet bool
}

func (v NullableApprovalDto) Get() *ApprovalDto {
	return v.value
}

func (v *NullableApprovalDto) Set(val *ApprovalDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalDto(val *ApprovalDto) *NullableApprovalDto {
	return &NullableApprovalDto{value: val, isSet: true}
}

func (v NullableApprovalDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


