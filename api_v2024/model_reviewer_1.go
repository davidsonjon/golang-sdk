/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"fmt"
)

// checks if the Reviewer1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reviewer1{}

// Reviewer1 Details of the reviewer for certification.
type Reviewer1 struct {
	// The reviewer's DTO type.
	Type string `json:"type"`
	// The reviewer's ID.
	Id string `json:"id"`
	// The reviewer's display name.
	Name string `json:"name"`
	// The reviewing identity's email. Only applicable to `IDENTITY`.
	Email NullableString `json:"email,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Reviewer1 Reviewer1

// NewReviewer1 instantiates a new Reviewer1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewer1(type_ string, id string, name string) *Reviewer1 {
	this := Reviewer1{}
	this.Type = type_
	this.Id = id
	this.Name = name
	return &this
}

// NewReviewer1WithDefaults instantiates a new Reviewer1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewer1WithDefaults() *Reviewer1 {
	this := Reviewer1{}
	return &this
}

// GetType returns the Type field value
func (o *Reviewer1) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Reviewer1) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Reviewer1) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *Reviewer1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Reviewer1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Reviewer1) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Reviewer1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Reviewer1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Reviewer1) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Reviewer1) GetEmail() string {
	if o == nil || isNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Reviewer1) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *Reviewer1) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *Reviewer1) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *Reviewer1) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *Reviewer1) UnsetEmail() {
	o.Email.Unset()
}

func (o Reviewer1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reviewer1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Reviewer1) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReviewer1 := _Reviewer1{}

	if err = json.Unmarshal(bytes, &varReviewer1); err == nil {
	*o = Reviewer1(varReviewer1)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReviewer1 struct {
	value *Reviewer1
	isSet bool
}

func (v NullableReviewer1) Get() *Reviewer1 {
	return v.value
}

func (v *NullableReviewer1) Set(val *Reviewer1) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewer1) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewer1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewer1(val *Reviewer1) *NullableReviewer1 {
	return &NullableReviewer1{value: val, isSet: true}
}

func (v NullableReviewer1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewer1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


