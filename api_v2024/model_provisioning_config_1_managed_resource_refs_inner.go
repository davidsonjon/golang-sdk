/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the ProvisioningConfig1ManagedResourceRefsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvisioningConfig1ManagedResourceRefsInner{}

// ProvisioningConfig1ManagedResourceRefsInner struct for ProvisioningConfig1ManagedResourceRefsInner
type ProvisioningConfig1ManagedResourceRefsInner struct {
	// The type of object being referenced
	Type map[string]interface{} `json:"type,omitempty"`
	// ID of the source
	Id map[string]interface{} `json:"id,omitempty"`
	// Human-readable display name of the source
	Name map[string]interface{} `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProvisioningConfig1ManagedResourceRefsInner ProvisioningConfig1ManagedResourceRefsInner

// NewProvisioningConfig1ManagedResourceRefsInner instantiates a new ProvisioningConfig1ManagedResourceRefsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningConfig1ManagedResourceRefsInner() *ProvisioningConfig1ManagedResourceRefsInner {
	this := ProvisioningConfig1ManagedResourceRefsInner{}
	return &this
}

// NewProvisioningConfig1ManagedResourceRefsInnerWithDefaults instantiates a new ProvisioningConfig1ManagedResourceRefsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningConfig1ManagedResourceRefsInnerWithDefaults() *ProvisioningConfig1ManagedResourceRefsInner {
	this := ProvisioningConfig1ManagedResourceRefsInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProvisioningConfig1ManagedResourceRefsInner) GetType() map[string]interface{} {
	if o == nil || IsNil(o.Type) {
		var ret map[string]interface{}
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningConfig1ManagedResourceRefsInner) GetTypeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return map[string]interface{}{}, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProvisioningConfig1ManagedResourceRefsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given map[string]interface{} and assigns it to the Type field.
func (o *ProvisioningConfig1ManagedResourceRefsInner) SetType(v map[string]interface{}) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProvisioningConfig1ManagedResourceRefsInner) GetId() map[string]interface{} {
	if o == nil || IsNil(o.Id) {
		var ret map[string]interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningConfig1ManagedResourceRefsInner) GetIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return map[string]interface{}{}, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProvisioningConfig1ManagedResourceRefsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given map[string]interface{} and assigns it to the Id field.
func (o *ProvisioningConfig1ManagedResourceRefsInner) SetId(v map[string]interface{}) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProvisioningConfig1ManagedResourceRefsInner) GetName() map[string]interface{} {
	if o == nil || IsNil(o.Name) {
		var ret map[string]interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningConfig1ManagedResourceRefsInner) GetNameOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return map[string]interface{}{}, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProvisioningConfig1ManagedResourceRefsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given map[string]interface{} and assigns it to the Name field.
func (o *ProvisioningConfig1ManagedResourceRefsInner) SetName(v map[string]interface{}) {
	o.Name = v
}

func (o ProvisioningConfig1ManagedResourceRefsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvisioningConfig1ManagedResourceRefsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProvisioningConfig1ManagedResourceRefsInner) UnmarshalJSON(data []byte) (err error) {
	varProvisioningConfig1ManagedResourceRefsInner := _ProvisioningConfig1ManagedResourceRefsInner{}

	err = json.Unmarshal(data, &varProvisioningConfig1ManagedResourceRefsInner)

	if err != nil {
		return err
	}

	*o = ProvisioningConfig1ManagedResourceRefsInner(varProvisioningConfig1ManagedResourceRefsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProvisioningConfig1ManagedResourceRefsInner struct {
	value *ProvisioningConfig1ManagedResourceRefsInner
	isSet bool
}

func (v NullableProvisioningConfig1ManagedResourceRefsInner) Get() *ProvisioningConfig1ManagedResourceRefsInner {
	return v.value
}

func (v *NullableProvisioningConfig1ManagedResourceRefsInner) Set(val *ProvisioningConfig1ManagedResourceRefsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningConfig1ManagedResourceRefsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningConfig1ManagedResourceRefsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningConfig1ManagedResourceRefsInner(val *ProvisioningConfig1ManagedResourceRefsInner) *NullableProvisioningConfig1ManagedResourceRefsInner {
	return &NullableProvisioningConfig1ManagedResourceRefsInner{value: val, isSet: true}
}

func (v NullableProvisioningConfig1ManagedResourceRefsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningConfig1ManagedResourceRefsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


