/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
	"time"
)

// Launcher struct for Launcher
type Launcher struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Icon *string `json:"icon,omitempty"`
	State *string `json:"state,omitempty"`
	UsageCertText *string `json:"usageCertText,omitempty"`
	UsageCertAttest *time.Time `json:"usageCertAttest,omitempty"`
	Account *LauncherAccount `json:"account,omitempty"`
	Links []LauncherLink `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Launcher Launcher

// NewLauncher instantiates a new Launcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLauncher() *Launcher {
	this := Launcher{}
	return &this
}

// NewLauncherWithDefaults instantiates a new Launcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLauncherWithDefaults() *Launcher {
	this := Launcher{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Launcher) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Launcher) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Launcher) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Launcher) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Launcher) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Launcher) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Launcher) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Launcher) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Launcher) SetDescription(v string) {
	o.Description = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Launcher) GetDateCreated() time.Time {
	if o == nil || isNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Launcher) HasDateCreated() bool {
	if o != nil && !isNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Launcher) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Launcher) GetLastUpdated() time.Time {
	if o == nil || isNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Launcher) HasLastUpdated() bool {
	if o != nil && !isNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Launcher) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Launcher) GetIcon() string {
	if o == nil || isNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetIconOk() (*string, bool) {
	if o == nil || isNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Launcher) HasIcon() bool {
	if o != nil && !isNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *Launcher) SetIcon(v string) {
	o.Icon = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Launcher) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Launcher) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Launcher) SetState(v string) {
	o.State = &v
}

// GetUsageCertText returns the UsageCertText field value if set, zero value otherwise.
func (o *Launcher) GetUsageCertText() string {
	if o == nil || isNil(o.UsageCertText) {
		var ret string
		return ret
	}
	return *o.UsageCertText
}

// GetUsageCertTextOk returns a tuple with the UsageCertText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetUsageCertTextOk() (*string, bool) {
	if o == nil || isNil(o.UsageCertText) {
		return nil, false
	}
	return o.UsageCertText, true
}

// HasUsageCertText returns a boolean if a field has been set.
func (o *Launcher) HasUsageCertText() bool {
	if o != nil && !isNil(o.UsageCertText) {
		return true
	}

	return false
}

// SetUsageCertText gets a reference to the given string and assigns it to the UsageCertText field.
func (o *Launcher) SetUsageCertText(v string) {
	o.UsageCertText = &v
}

// GetUsageCertAttest returns the UsageCertAttest field value if set, zero value otherwise.
func (o *Launcher) GetUsageCertAttest() time.Time {
	if o == nil || isNil(o.UsageCertAttest) {
		var ret time.Time
		return ret
	}
	return *o.UsageCertAttest
}

// GetUsageCertAttestOk returns a tuple with the UsageCertAttest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetUsageCertAttestOk() (*time.Time, bool) {
	if o == nil || isNil(o.UsageCertAttest) {
		return nil, false
	}
	return o.UsageCertAttest, true
}

// HasUsageCertAttest returns a boolean if a field has been set.
func (o *Launcher) HasUsageCertAttest() bool {
	if o != nil && !isNil(o.UsageCertAttest) {
		return true
	}

	return false
}

// SetUsageCertAttest gets a reference to the given time.Time and assigns it to the UsageCertAttest field.
func (o *Launcher) SetUsageCertAttest(v time.Time) {
	o.UsageCertAttest = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Launcher) GetAccount() LauncherAccount {
	if o == nil || isNil(o.Account) {
		var ret LauncherAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetAccountOk() (*LauncherAccount, bool) {
	if o == nil || isNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Launcher) HasAccount() bool {
	if o != nil && !isNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given LauncherAccount and assigns it to the Account field.
func (o *Launcher) SetAccount(v LauncherAccount) {
	o.Account = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Launcher) GetLinks() []LauncherLink {
	if o == nil || isNil(o.Links) {
		var ret []LauncherLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetLinksOk() ([]LauncherLink, bool) {
	if o == nil || isNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Launcher) HasLinks() bool {
	if o != nil && !isNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LauncherLink and assigns it to the Links field.
func (o *Launcher) SetLinks(v []LauncherLink) {
	o.Links = v
}

func (o Launcher) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !isNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !isNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.UsageCertText) {
		toSerialize["usageCertText"] = o.UsageCertText
	}
	if !isNil(o.UsageCertAttest) {
		toSerialize["usageCertAttest"] = o.UsageCertAttest
	}
	if !isNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !isNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Launcher) UnmarshalJSON(bytes []byte) (err error) {
	varLauncher := _Launcher{}

	if err = json.Unmarshal(bytes, &varLauncher); err == nil {
		*o = Launcher(varLauncher)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "dateCreated")
		delete(additionalProperties, "lastUpdated")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "state")
		delete(additionalProperties, "usageCertText")
		delete(additionalProperties, "usageCertAttest")
		delete(additionalProperties, "account")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLauncher struct {
	value *Launcher
	isSet bool
}

func (v NullableLauncher) Get() *Launcher {
	return v.value
}

func (v *NullableLauncher) Set(val *Launcher) {
	v.value = val
	v.isSet = true
}

func (v NullableLauncher) IsSet() bool {
	return v.isSet
}

func (v *NullableLauncher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLauncher(val *Launcher) *NullableLauncher {
	return &NullableLauncher{value: val, isSet: true}
}

func (v NullableLauncher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLauncher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


