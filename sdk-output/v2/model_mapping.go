/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// Mapping struct for Mapping
type Mapping struct {
	Mappings map[string]interface{} `json:"mappings,omitempty"`
	Operators map[string]interface{} `json:"operators,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Mapping Mapping

// NewMapping instantiates a new Mapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapping() *Mapping {
	this := Mapping{}
	return &this
}

// NewMappingWithDefaults instantiates a new Mapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappingWithDefaults() *Mapping {
	this := Mapping{}
	return &this
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *Mapping) GetMappings() map[string]interface{} {
	if o == nil || isNil(o.Mappings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetMappingsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Mappings) {
		return map[string]interface{}{}, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *Mapping) HasMappings() bool {
	if o != nil && !isNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given map[string]interface{} and assigns it to the Mappings field.
func (o *Mapping) SetMappings(v map[string]interface{}) {
	o.Mappings = v
}

// GetOperators returns the Operators field value if set, zero value otherwise.
func (o *Mapping) GetOperators() map[string]interface{} {
	if o == nil || isNil(o.Operators) {
		var ret map[string]interface{}
		return ret
	}
	return o.Operators
}

// GetOperatorsOk returns a tuple with the Operators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapping) GetOperatorsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Operators) {
		return map[string]interface{}{}, false
	}
	return o.Operators, true
}

// HasOperators returns a boolean if a field has been set.
func (o *Mapping) HasOperators() bool {
	if o != nil && !isNil(o.Operators) {
		return true
	}

	return false
}

// SetOperators gets a reference to the given map[string]interface{} and assigns it to the Operators field.
func (o *Mapping) SetOperators(v map[string]interface{}) {
	o.Operators = v
}

func (o Mapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Mappings) {
		toSerialize["mappings"] = o.Mappings
	}
	if !isNil(o.Operators) {
		toSerialize["operators"] = o.Operators
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Mapping) UnmarshalJSON(bytes []byte) (err error) {
	varMapping := _Mapping{}

	if err = json.Unmarshal(bytes, &varMapping); err == nil {
		*o = Mapping(varMapping)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "mappings")
		delete(additionalProperties, "operators")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMapping struct {
	value *Mapping
	isSet bool
}

func (v NullableMapping) Get() *Mapping {
	return v.value
}

func (v *NullableMapping) Set(val *Mapping) {
	v.value = val
	v.isSet = true
}

func (v NullableMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapping(val *Mapping) *NullableMapping {
	return &NullableMapping{value: val, isSet: true}
}

func (v NullableMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


