/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
	"time"
)

// SearchIdentity struct for SearchIdentity
type SearchIdentity struct {
	Id *string `json:"id,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Modified *time.Time `json:"modified,omitempty"`
	Synced *time.Time `json:"synced,omitempty"`
	Phone *string `json:"phone,omitempty"`
	Inactive *bool `json:"inactive,omitempty"`
	Status *string `json:"status,omitempty"`
	EmployeeNumber *string `json:"employeeNumber,omitempty"`
	Source *LauncherAccount `json:"source,omitempty"`
	IdentityProfile *LauncherAccount `json:"identityProfile,omitempty"`
	Manager *SearchIdentityManager `json:"manager,omitempty"`
	Attributes *SearchIdentityAttributes `json:"attributes,omitempty"`
	ProcessingState *string `json:"processingState,omitempty"`
	ProcessingDetails *SearchIdentityProcessingDetails `json:"processingDetails,omitempty"`
	AccountCount *int32 `json:"accountCount,omitempty"`
	Accounts []SearchIdentityAccountsInner `json:"accounts,omitempty"`
	AppCount *int32 `json:"appCount,omitempty"`
	Apps []SearchIdentityAppsInner `json:"apps,omitempty"`
	AccessCount *int32 `json:"accessCount,omitempty"`
	EntitlementCount *int32 `json:"entitlementCount,omitempty"`
	RoleCount *int32 `json:"roleCount,omitempty"`
	AccessProfileCount *int32 `json:"accessProfileCount,omitempty"`
	Access []SearchIdentityAccessInner `json:"access,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchIdentity SearchIdentity

// NewSearchIdentity instantiates a new SearchIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchIdentity() *SearchIdentity {
	this := SearchIdentity{}
	return &this
}

// NewSearchIdentityWithDefaults instantiates a new SearchIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchIdentityWithDefaults() *SearchIdentity {
	this := SearchIdentity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SearchIdentity) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SearchIdentity) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SearchIdentity) SetId(v string) {
	o.Id = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *SearchIdentity) GetFirstName() string {
	if o == nil || isNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetFirstNameOk() (*string, bool) {
	if o == nil || isNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *SearchIdentity) HasFirstName() bool {
	if o != nil && !isNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *SearchIdentity) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *SearchIdentity) GetLastName() string {
	if o == nil || isNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetLastNameOk() (*string, bool) {
	if o == nil || isNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *SearchIdentity) HasLastName() bool {
	if o != nil && !isNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *SearchIdentity) SetLastName(v string) {
	o.LastName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SearchIdentity) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SearchIdentity) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SearchIdentity) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SearchIdentity) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SearchIdentity) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SearchIdentity) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SearchIdentity) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SearchIdentity) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SearchIdentity) SetEmail(v string) {
	o.Email = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SearchIdentity) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SearchIdentity) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *SearchIdentity) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *SearchIdentity) GetModified() time.Time {
	if o == nil || isNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *SearchIdentity) HasModified() bool {
	if o != nil && !isNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *SearchIdentity) SetModified(v time.Time) {
	o.Modified = &v
}

// GetSynced returns the Synced field value if set, zero value otherwise.
func (o *SearchIdentity) GetSynced() time.Time {
	if o == nil || isNil(o.Synced) {
		var ret time.Time
		return ret
	}
	return *o.Synced
}

// GetSyncedOk returns a tuple with the Synced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetSyncedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Synced) {
		return nil, false
	}
	return o.Synced, true
}

// HasSynced returns a boolean if a field has been set.
func (o *SearchIdentity) HasSynced() bool {
	if o != nil && !isNil(o.Synced) {
		return true
	}

	return false
}

// SetSynced gets a reference to the given time.Time and assigns it to the Synced field.
func (o *SearchIdentity) SetSynced(v time.Time) {
	o.Synced = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SearchIdentity) GetPhone() string {
	if o == nil || isNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetPhoneOk() (*string, bool) {
	if o == nil || isNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SearchIdentity) HasPhone() bool {
	if o != nil && !isNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *SearchIdentity) SetPhone(v string) {
	o.Phone = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *SearchIdentity) GetInactive() bool {
	if o == nil || isNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetInactiveOk() (*bool, bool) {
	if o == nil || isNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *SearchIdentity) HasInactive() bool {
	if o != nil && !isNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *SearchIdentity) SetInactive(v bool) {
	o.Inactive = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SearchIdentity) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SearchIdentity) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SearchIdentity) SetStatus(v string) {
	o.Status = &v
}

// GetEmployeeNumber returns the EmployeeNumber field value if set, zero value otherwise.
func (o *SearchIdentity) GetEmployeeNumber() string {
	if o == nil || isNil(o.EmployeeNumber) {
		var ret string
		return ret
	}
	return *o.EmployeeNumber
}

// GetEmployeeNumberOk returns a tuple with the EmployeeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetEmployeeNumberOk() (*string, bool) {
	if o == nil || isNil(o.EmployeeNumber) {
		return nil, false
	}
	return o.EmployeeNumber, true
}

// HasEmployeeNumber returns a boolean if a field has been set.
func (o *SearchIdentity) HasEmployeeNumber() bool {
	if o != nil && !isNil(o.EmployeeNumber) {
		return true
	}

	return false
}

// SetEmployeeNumber gets a reference to the given string and assigns it to the EmployeeNumber field.
func (o *SearchIdentity) SetEmployeeNumber(v string) {
	o.EmployeeNumber = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SearchIdentity) GetSource() LauncherAccount {
	if o == nil || isNil(o.Source) {
		var ret LauncherAccount
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetSourceOk() (*LauncherAccount, bool) {
	if o == nil || isNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SearchIdentity) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given LauncherAccount and assigns it to the Source field.
func (o *SearchIdentity) SetSource(v LauncherAccount) {
	o.Source = &v
}

// GetIdentityProfile returns the IdentityProfile field value if set, zero value otherwise.
func (o *SearchIdentity) GetIdentityProfile() LauncherAccount {
	if o == nil || isNil(o.IdentityProfile) {
		var ret LauncherAccount
		return ret
	}
	return *o.IdentityProfile
}

// GetIdentityProfileOk returns a tuple with the IdentityProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetIdentityProfileOk() (*LauncherAccount, bool) {
	if o == nil || isNil(o.IdentityProfile) {
		return nil, false
	}
	return o.IdentityProfile, true
}

// HasIdentityProfile returns a boolean if a field has been set.
func (o *SearchIdentity) HasIdentityProfile() bool {
	if o != nil && !isNil(o.IdentityProfile) {
		return true
	}

	return false
}

// SetIdentityProfile gets a reference to the given LauncherAccount and assigns it to the IdentityProfile field.
func (o *SearchIdentity) SetIdentityProfile(v LauncherAccount) {
	o.IdentityProfile = &v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *SearchIdentity) GetManager() SearchIdentityManager {
	if o == nil || isNil(o.Manager) {
		var ret SearchIdentityManager
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetManagerOk() (*SearchIdentityManager, bool) {
	if o == nil || isNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *SearchIdentity) HasManager() bool {
	if o != nil && !isNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given SearchIdentityManager and assigns it to the Manager field.
func (o *SearchIdentity) SetManager(v SearchIdentityManager) {
	o.Manager = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SearchIdentity) GetAttributes() SearchIdentityAttributes {
	if o == nil || isNil(o.Attributes) {
		var ret SearchIdentityAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAttributesOk() (*SearchIdentityAttributes, bool) {
	if o == nil || isNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SearchIdentity) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given SearchIdentityAttributes and assigns it to the Attributes field.
func (o *SearchIdentity) SetAttributes(v SearchIdentityAttributes) {
	o.Attributes = &v
}

// GetProcessingState returns the ProcessingState field value if set, zero value otherwise.
func (o *SearchIdentity) GetProcessingState() string {
	if o == nil || isNil(o.ProcessingState) {
		var ret string
		return ret
	}
	return *o.ProcessingState
}

// GetProcessingStateOk returns a tuple with the ProcessingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetProcessingStateOk() (*string, bool) {
	if o == nil || isNil(o.ProcessingState) {
		return nil, false
	}
	return o.ProcessingState, true
}

// HasProcessingState returns a boolean if a field has been set.
func (o *SearchIdentity) HasProcessingState() bool {
	if o != nil && !isNil(o.ProcessingState) {
		return true
	}

	return false
}

// SetProcessingState gets a reference to the given string and assigns it to the ProcessingState field.
func (o *SearchIdentity) SetProcessingState(v string) {
	o.ProcessingState = &v
}

// GetProcessingDetails returns the ProcessingDetails field value if set, zero value otherwise.
func (o *SearchIdentity) GetProcessingDetails() SearchIdentityProcessingDetails {
	if o == nil || isNil(o.ProcessingDetails) {
		var ret SearchIdentityProcessingDetails
		return ret
	}
	return *o.ProcessingDetails
}

// GetProcessingDetailsOk returns a tuple with the ProcessingDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetProcessingDetailsOk() (*SearchIdentityProcessingDetails, bool) {
	if o == nil || isNil(o.ProcessingDetails) {
		return nil, false
	}
	return o.ProcessingDetails, true
}

// HasProcessingDetails returns a boolean if a field has been set.
func (o *SearchIdentity) HasProcessingDetails() bool {
	if o != nil && !isNil(o.ProcessingDetails) {
		return true
	}

	return false
}

// SetProcessingDetails gets a reference to the given SearchIdentityProcessingDetails and assigns it to the ProcessingDetails field.
func (o *SearchIdentity) SetProcessingDetails(v SearchIdentityProcessingDetails) {
	o.ProcessingDetails = &v
}

// GetAccountCount returns the AccountCount field value if set, zero value otherwise.
func (o *SearchIdentity) GetAccountCount() int32 {
	if o == nil || isNil(o.AccountCount) {
		var ret int32
		return ret
	}
	return *o.AccountCount
}

// GetAccountCountOk returns a tuple with the AccountCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAccountCountOk() (*int32, bool) {
	if o == nil || isNil(o.AccountCount) {
		return nil, false
	}
	return o.AccountCount, true
}

// HasAccountCount returns a boolean if a field has been set.
func (o *SearchIdentity) HasAccountCount() bool {
	if o != nil && !isNil(o.AccountCount) {
		return true
	}

	return false
}

// SetAccountCount gets a reference to the given int32 and assigns it to the AccountCount field.
func (o *SearchIdentity) SetAccountCount(v int32) {
	o.AccountCount = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *SearchIdentity) GetAccounts() []SearchIdentityAccountsInner {
	if o == nil || isNil(o.Accounts) {
		var ret []SearchIdentityAccountsInner
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAccountsOk() ([]SearchIdentityAccountsInner, bool) {
	if o == nil || isNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *SearchIdentity) HasAccounts() bool {
	if o != nil && !isNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []SearchIdentityAccountsInner and assigns it to the Accounts field.
func (o *SearchIdentity) SetAccounts(v []SearchIdentityAccountsInner) {
	o.Accounts = v
}

// GetAppCount returns the AppCount field value if set, zero value otherwise.
func (o *SearchIdentity) GetAppCount() int32 {
	if o == nil || isNil(o.AppCount) {
		var ret int32
		return ret
	}
	return *o.AppCount
}

// GetAppCountOk returns a tuple with the AppCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAppCountOk() (*int32, bool) {
	if o == nil || isNil(o.AppCount) {
		return nil, false
	}
	return o.AppCount, true
}

// HasAppCount returns a boolean if a field has been set.
func (o *SearchIdentity) HasAppCount() bool {
	if o != nil && !isNil(o.AppCount) {
		return true
	}

	return false
}

// SetAppCount gets a reference to the given int32 and assigns it to the AppCount field.
func (o *SearchIdentity) SetAppCount(v int32) {
	o.AppCount = &v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *SearchIdentity) GetApps() []SearchIdentityAppsInner {
	if o == nil || isNil(o.Apps) {
		var ret []SearchIdentityAppsInner
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAppsOk() ([]SearchIdentityAppsInner, bool) {
	if o == nil || isNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *SearchIdentity) HasApps() bool {
	if o != nil && !isNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []SearchIdentityAppsInner and assigns it to the Apps field.
func (o *SearchIdentity) SetApps(v []SearchIdentityAppsInner) {
	o.Apps = v
}

// GetAccessCount returns the AccessCount field value if set, zero value otherwise.
func (o *SearchIdentity) GetAccessCount() int32 {
	if o == nil || isNil(o.AccessCount) {
		var ret int32
		return ret
	}
	return *o.AccessCount
}

// GetAccessCountOk returns a tuple with the AccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAccessCountOk() (*int32, bool) {
	if o == nil || isNil(o.AccessCount) {
		return nil, false
	}
	return o.AccessCount, true
}

// HasAccessCount returns a boolean if a field has been set.
func (o *SearchIdentity) HasAccessCount() bool {
	if o != nil && !isNil(o.AccessCount) {
		return true
	}

	return false
}

// SetAccessCount gets a reference to the given int32 and assigns it to the AccessCount field.
func (o *SearchIdentity) SetAccessCount(v int32) {
	o.AccessCount = &v
}

// GetEntitlementCount returns the EntitlementCount field value if set, zero value otherwise.
func (o *SearchIdentity) GetEntitlementCount() int32 {
	if o == nil || isNil(o.EntitlementCount) {
		var ret int32
		return ret
	}
	return *o.EntitlementCount
}

// GetEntitlementCountOk returns a tuple with the EntitlementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetEntitlementCountOk() (*int32, bool) {
	if o == nil || isNil(o.EntitlementCount) {
		return nil, false
	}
	return o.EntitlementCount, true
}

// HasEntitlementCount returns a boolean if a field has been set.
func (o *SearchIdentity) HasEntitlementCount() bool {
	if o != nil && !isNil(o.EntitlementCount) {
		return true
	}

	return false
}

// SetEntitlementCount gets a reference to the given int32 and assigns it to the EntitlementCount field.
func (o *SearchIdentity) SetEntitlementCount(v int32) {
	o.EntitlementCount = &v
}

// GetRoleCount returns the RoleCount field value if set, zero value otherwise.
func (o *SearchIdentity) GetRoleCount() int32 {
	if o == nil || isNil(o.RoleCount) {
		var ret int32
		return ret
	}
	return *o.RoleCount
}

// GetRoleCountOk returns a tuple with the RoleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetRoleCountOk() (*int32, bool) {
	if o == nil || isNil(o.RoleCount) {
		return nil, false
	}
	return o.RoleCount, true
}

// HasRoleCount returns a boolean if a field has been set.
func (o *SearchIdentity) HasRoleCount() bool {
	if o != nil && !isNil(o.RoleCount) {
		return true
	}

	return false
}

// SetRoleCount gets a reference to the given int32 and assigns it to the RoleCount field.
func (o *SearchIdentity) SetRoleCount(v int32) {
	o.RoleCount = &v
}

// GetAccessProfileCount returns the AccessProfileCount field value if set, zero value otherwise.
func (o *SearchIdentity) GetAccessProfileCount() int32 {
	if o == nil || isNil(o.AccessProfileCount) {
		var ret int32
		return ret
	}
	return *o.AccessProfileCount
}

// GetAccessProfileCountOk returns a tuple with the AccessProfileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAccessProfileCountOk() (*int32, bool) {
	if o == nil || isNil(o.AccessProfileCount) {
		return nil, false
	}
	return o.AccessProfileCount, true
}

// HasAccessProfileCount returns a boolean if a field has been set.
func (o *SearchIdentity) HasAccessProfileCount() bool {
	if o != nil && !isNil(o.AccessProfileCount) {
		return true
	}

	return false
}

// SetAccessProfileCount gets a reference to the given int32 and assigns it to the AccessProfileCount field.
func (o *SearchIdentity) SetAccessProfileCount(v int32) {
	o.AccessProfileCount = &v
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *SearchIdentity) GetAccess() []SearchIdentityAccessInner {
	if o == nil || isNil(o.Access) {
		var ret []SearchIdentityAccessInner
		return ret
	}
	return o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentity) GetAccessOk() ([]SearchIdentityAccessInner, bool) {
	if o == nil || isNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *SearchIdentity) HasAccess() bool {
	if o != nil && !isNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given []SearchIdentityAccessInner and assigns it to the Access field.
func (o *SearchIdentity) SetAccess(v []SearchIdentityAccessInner) {
	o.Access = v
}

func (o SearchIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !isNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !isNil(o.Synced) {
		toSerialize["synced"] = o.Synced
	}
	if !isNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !isNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.EmployeeNumber) {
		toSerialize["employeeNumber"] = o.EmployeeNumber
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.IdentityProfile) {
		toSerialize["identityProfile"] = o.IdentityProfile
	}
	if !isNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.ProcessingState) {
		toSerialize["processingState"] = o.ProcessingState
	}
	if !isNil(o.ProcessingDetails) {
		toSerialize["processingDetails"] = o.ProcessingDetails
	}
	if !isNil(o.AccountCount) {
		toSerialize["accountCount"] = o.AccountCount
	}
	if !isNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !isNil(o.AppCount) {
		toSerialize["appCount"] = o.AppCount
	}
	if !isNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	if !isNil(o.AccessCount) {
		toSerialize["accessCount"] = o.AccessCount
	}
	if !isNil(o.EntitlementCount) {
		toSerialize["entitlementCount"] = o.EntitlementCount
	}
	if !isNil(o.RoleCount) {
		toSerialize["roleCount"] = o.RoleCount
	}
	if !isNil(o.AccessProfileCount) {
		toSerialize["accessProfileCount"] = o.AccessProfileCount
	}
	if !isNil(o.Access) {
		toSerialize["access"] = o.Access
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SearchIdentity) UnmarshalJSON(bytes []byte) (err error) {
	varSearchIdentity := _SearchIdentity{}

	if err = json.Unmarshal(bytes, &varSearchIdentity); err == nil {
		*o = SearchIdentity(varSearchIdentity)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "synced")
		delete(additionalProperties, "phone")
		delete(additionalProperties, "inactive")
		delete(additionalProperties, "status")
		delete(additionalProperties, "employeeNumber")
		delete(additionalProperties, "source")
		delete(additionalProperties, "identityProfile")
		delete(additionalProperties, "manager")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "processingState")
		delete(additionalProperties, "processingDetails")
		delete(additionalProperties, "accountCount")
		delete(additionalProperties, "accounts")
		delete(additionalProperties, "appCount")
		delete(additionalProperties, "apps")
		delete(additionalProperties, "accessCount")
		delete(additionalProperties, "entitlementCount")
		delete(additionalProperties, "roleCount")
		delete(additionalProperties, "accessProfileCount")
		delete(additionalProperties, "access")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchIdentity struct {
	value *SearchIdentity
	isSet bool
}

func (v NullableSearchIdentity) Get() *SearchIdentity {
	return v.value
}

func (v *NullableSearchIdentity) Set(val *SearchIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchIdentity(val *SearchIdentity) *NullableSearchIdentity {
	return &NullableSearchIdentity{value: val, isSet: true}
}

func (v NullableSearchIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


