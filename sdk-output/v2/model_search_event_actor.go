/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// SearchEventActor struct for SearchEventActor
type SearchEventActor struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchEventActor SearchEventActor

// NewSearchEventActor instantiates a new SearchEventActor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchEventActor() *SearchEventActor {
	this := SearchEventActor{}
	return &this
}

// NewSearchEventActorWithDefaults instantiates a new SearchEventActor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchEventActorWithDefaults() *SearchEventActor {
	this := SearchEventActor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SearchEventActor) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchEventActor) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SearchEventActor) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SearchEventActor) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchEventActor) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchEventActor) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchEventActor) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchEventActor) SetType(v string) {
	o.Type = &v
}

func (o SearchEventActor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SearchEventActor) UnmarshalJSON(bytes []byte) (err error) {
	varSearchEventActor := _SearchEventActor{}

	if err = json.Unmarshal(bytes, &varSearchEventActor); err == nil {
		*o = SearchEventActor(varSearchEventActor)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchEventActor struct {
	value *SearchEventActor
	isSet bool
}

func (v NullableSearchEventActor) Get() *SearchEventActor {
	return v.value
}

func (v *NullableSearchEventActor) Set(val *SearchEventActor) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchEventActor) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchEventActor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchEventActor(val *SearchEventActor) *NullableSearchEventActor {
	return &NullableSearchEventActor{value: val, isSet: true}
}

func (v NullableSearchEventActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchEventActor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


