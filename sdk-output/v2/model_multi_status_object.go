/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// MultiStatusObject struct for MultiStatusObject
type MultiStatusObject struct {
	Success []string `json:"success,omitempty"`
	Fail []MultiStatusObjectFailInner `json:"fail,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiStatusObject MultiStatusObject

// NewMultiStatusObject instantiates a new MultiStatusObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiStatusObject() *MultiStatusObject {
	this := MultiStatusObject{}
	return &this
}

// NewMultiStatusObjectWithDefaults instantiates a new MultiStatusObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiStatusObjectWithDefaults() *MultiStatusObject {
	this := MultiStatusObject{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *MultiStatusObject) GetSuccess() []string {
	if o == nil || isNil(o.Success) {
		var ret []string
		return ret
	}
	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiStatusObject) GetSuccessOk() ([]string, bool) {
	if o == nil || isNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *MultiStatusObject) HasSuccess() bool {
	if o != nil && !isNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given []string and assigns it to the Success field.
func (o *MultiStatusObject) SetSuccess(v []string) {
	o.Success = v
}

// GetFail returns the Fail field value if set, zero value otherwise.
func (o *MultiStatusObject) GetFail() []MultiStatusObjectFailInner {
	if o == nil || isNil(o.Fail) {
		var ret []MultiStatusObjectFailInner
		return ret
	}
	return o.Fail
}

// GetFailOk returns a tuple with the Fail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiStatusObject) GetFailOk() ([]MultiStatusObjectFailInner, bool) {
	if o == nil || isNil(o.Fail) {
		return nil, false
	}
	return o.Fail, true
}

// HasFail returns a boolean if a field has been set.
func (o *MultiStatusObject) HasFail() bool {
	if o != nil && !isNil(o.Fail) {
		return true
	}

	return false
}

// SetFail gets a reference to the given []MultiStatusObjectFailInner and assigns it to the Fail field.
func (o *MultiStatusObject) SetFail(v []MultiStatusObjectFailInner) {
	o.Fail = v
}

func (o MultiStatusObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !isNil(o.Fail) {
		toSerialize["fail"] = o.Fail
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MultiStatusObject) UnmarshalJSON(bytes []byte) (err error) {
	varMultiStatusObject := _MultiStatusObject{}

	if err = json.Unmarshal(bytes, &varMultiStatusObject); err == nil {
		*o = MultiStatusObject(varMultiStatusObject)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "fail")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiStatusObject struct {
	value *MultiStatusObject
	isSet bool
}

func (v NullableMultiStatusObject) Get() *MultiStatusObject {
	return v.value
}

func (v *NullableMultiStatusObject) Set(val *MultiStatusObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiStatusObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiStatusObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiStatusObject(val *MultiStatusObject) *NullableMultiStatusObject {
	return &NullableMultiStatusObject{value: val, isSet: true}
}

func (v NullableMultiStatusObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiStatusObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


