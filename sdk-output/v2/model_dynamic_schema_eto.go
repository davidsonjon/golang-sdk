/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// DynamicSchemaEto Dynamic schema, with no predefined attributes.
type DynamicSchemaEto struct {
	Attribute *string `json:"attribute,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DynamicSchemaEto DynamicSchemaEto

// NewDynamicSchemaEto instantiates a new DynamicSchemaEto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicSchemaEto() *DynamicSchemaEto {
	this := DynamicSchemaEto{}
	return &this
}

// NewDynamicSchemaEtoWithDefaults instantiates a new DynamicSchemaEto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicSchemaEtoWithDefaults() *DynamicSchemaEto {
	this := DynamicSchemaEto{}
	return &this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *DynamicSchemaEto) GetAttribute() string {
	if o == nil || isNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicSchemaEto) GetAttributeOk() (*string, bool) {
	if o == nil || isNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *DynamicSchemaEto) HasAttribute() bool {
	if o != nil && !isNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *DynamicSchemaEto) SetAttribute(v string) {
	o.Attribute = &v
}

func (o DynamicSchemaEto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DynamicSchemaEto) UnmarshalJSON(bytes []byte) (err error) {
	varDynamicSchemaEto := _DynamicSchemaEto{}

	if err = json.Unmarshal(bytes, &varDynamicSchemaEto); err == nil {
		*o = DynamicSchemaEto(varDynamicSchemaEto)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "attribute")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDynamicSchemaEto struct {
	value *DynamicSchemaEto
	isSet bool
}

func (v NullableDynamicSchemaEto) Get() *DynamicSchemaEto {
	return v.value
}

func (v *NullableDynamicSchemaEto) Set(val *DynamicSchemaEto) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicSchemaEto) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicSchemaEto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicSchemaEto(val *DynamicSchemaEto) *NullableDynamicSchemaEto {
	return &NullableDynamicSchemaEto{value: val, isSet: true}
}

func (v NullableDynamicSchemaEto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicSchemaEto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


