/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ProvisioningActivitiesApiService ProvisioningActivitiesApi service
type ProvisioningActivitiesApiService service

type ApiGetProvisioningActivityRequest struct {
	ctx context.Context
	ApiService *ProvisioningActivitiesApiService
	provisioningActivityId string
}

func (r ApiGetProvisioningActivityRequest) Execute() (*ProvisioningActivity, *http.Response, error) {
	return r.ApiService.GetProvisioningActivityExecute(r)
}

/*
GetProvisioningActivity Retrieves a provisioning activity.

Retrieves a provisioning activity by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param provisioningActivityId ID of a provisioning activity.
 @return ApiGetProvisioningActivityRequest
*/
func (a *ProvisioningActivitiesApiService) GetProvisioningActivity(ctx context.Context, provisioningActivityId string) ApiGetProvisioningActivityRequest {
	return ApiGetProvisioningActivityRequest{
		ApiService: a,
		ctx: ctx,
		provisioningActivityId: provisioningActivityId,
	}
}

// Execute executes the request
//  @return ProvisioningActivity
func (a *ProvisioningActivitiesApiService) GetProvisioningActivityExecute(r ApiGetProvisioningActivityRequest) (*ProvisioningActivity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningActivitiesApiService.GetProvisioningActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-activities/{provisioningActivityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"provisioningActivityId"+"}", url.PathEscape(parameterToString(r.provisioningActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListProvisioningActivitiesRequest struct {
	ctx context.Context
	ApiService *ProvisioningActivitiesApiService
	filters *string
	sort *string
	offset *int32
	limit *int32
}

// Search filters. Supported operators are &#39;co&#39;, &#39;sw&#39;, &#39;eq&#39;, &#39;or&#39;, &#39;and&#39;, &#39;gt&#39;, &#39;lt&#39;, &#39;ge&#39;, &#39;le&#39;, &#39;ne&#39;, &#39;not&#39; and &#39;pr&#39; which are SCIM-compliant. Supported attributes for filtering are ‘operation’, ’name’, ‘sourceName’ and ‘status’. Example: &#39;property eq \&quot;value\&quot;&#39;.
func (r ApiListProvisioningActivitiesRequest) Filters(filters string) ApiListProvisioningActivitiesRequest {
	r.filters = &filters
	return r
}

// One or more attributes on which to sort each separated by a &#39;,&#39;. Prefix the attribute name with a minus sign (ex. -dateCreated) for descending sort. Supported attributes for sorting are &#39;operation&#39;, &#39;name&#39;, &#39;sourceName&#39; ,&#39;status&#39;, &#39;dateCreated&#39; and &#39;lastUpdated&#39;.
func (r ApiListProvisioningActivitiesRequest) Sort(sort string) ApiListProvisioningActivitiesRequest {
	r.sort = &sort
	return r
}

// Paging offset.
func (r ApiListProvisioningActivitiesRequest) Offset(offset int32) ApiListProvisioningActivitiesRequest {
	r.offset = &offset
	return r
}

// Paging limit.
func (r ApiListProvisioningActivitiesRequest) Limit(limit int32) ApiListProvisioningActivitiesRequest {
	r.limit = &limit
	return r
}

func (r ApiListProvisioningActivitiesRequest) Execute() ([]ProvisioningActivity, *http.Response, error) {
	return r.ApiService.ListProvisioningActivitiesExecute(r)
}

/*
ListProvisioningActivities Lists the provisioning activities.

Lists the provisioning activities.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListProvisioningActivitiesRequest
*/
func (a *ProvisioningActivitiesApiService) ListProvisioningActivities(ctx context.Context) ApiListProvisioningActivitiesRequest {
	return ApiListProvisioningActivitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProvisioningActivity
func (a *ProvisioningActivitiesApiService) ListProvisioningActivitiesExecute(r ApiListProvisioningActivitiesRequest) ([]ProvisioningActivity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProvisioningActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningActivitiesApiService.ListProvisioningActivities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisioning-activities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filters != nil {
		localVarQueryParams.Add("filters", parameterToString(*r.filters, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
