/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
	"time"
)

// TaskResult struct for TaskResult
type TaskResult struct {
	Type *string `json:"type,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ParentName *string `json:"parentName,omitempty"`
	Launcher *string `json:"launcher,omitempty"`
	Completed *time.Time `json:"completed,omitempty"`
	Launched *time.Time `json:"launched,omitempty"`
	CompletionStatus *string `json:"completionStatus,omitempty"`
	Messages []TaskResultMessagesInner `json:"messages,omitempty"`
	Returns []TaskResultReturnsInner `json:"returns,omitempty"`
	Attributes *DynamicSchemaEto `json:"attributes,omitempty"`
	Progress *string `json:"progress,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TaskResult TaskResult

// NewTaskResult instantiates a new TaskResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskResult() *TaskResult {
	this := TaskResult{}
	return &this
}

// NewTaskResultWithDefaults instantiates a new TaskResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskResultWithDefaults() *TaskResult {
	this := TaskResult{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaskResult) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaskResult) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaskResult) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaskResult) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaskResult) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaskResult) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskResult) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskResult) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskResult) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaskResult) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskResult) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TaskResult) SetDescription(v string) {
	o.Description = &v
}

// GetParentName returns the ParentName field value if set, zero value otherwise.
func (o *TaskResult) GetParentName() string {
	if o == nil || isNil(o.ParentName) {
		var ret string
		return ret
	}
	return *o.ParentName
}

// GetParentNameOk returns a tuple with the ParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetParentNameOk() (*string, bool) {
	if o == nil || isNil(o.ParentName) {
		return nil, false
	}
	return o.ParentName, true
}

// HasParentName returns a boolean if a field has been set.
func (o *TaskResult) HasParentName() bool {
	if o != nil && !isNil(o.ParentName) {
		return true
	}

	return false
}

// SetParentName gets a reference to the given string and assigns it to the ParentName field.
func (o *TaskResult) SetParentName(v string) {
	o.ParentName = &v
}

// GetLauncher returns the Launcher field value if set, zero value otherwise.
func (o *TaskResult) GetLauncher() string {
	if o == nil || isNil(o.Launcher) {
		var ret string
		return ret
	}
	return *o.Launcher
}

// GetLauncherOk returns a tuple with the Launcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetLauncherOk() (*string, bool) {
	if o == nil || isNil(o.Launcher) {
		return nil, false
	}
	return o.Launcher, true
}

// HasLauncher returns a boolean if a field has been set.
func (o *TaskResult) HasLauncher() bool {
	if o != nil && !isNil(o.Launcher) {
		return true
	}

	return false
}

// SetLauncher gets a reference to the given string and assigns it to the Launcher field.
func (o *TaskResult) SetLauncher(v string) {
	o.Launcher = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *TaskResult) GetCompleted() time.Time {
	if o == nil || isNil(o.Completed) {
		var ret time.Time
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetCompletedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *TaskResult) HasCompleted() bool {
	if o != nil && !isNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given time.Time and assigns it to the Completed field.
func (o *TaskResult) SetCompleted(v time.Time) {
	o.Completed = &v
}

// GetLaunched returns the Launched field value if set, zero value otherwise.
func (o *TaskResult) GetLaunched() time.Time {
	if o == nil || isNil(o.Launched) {
		var ret time.Time
		return ret
	}
	return *o.Launched
}

// GetLaunchedOk returns a tuple with the Launched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetLaunchedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Launched) {
		return nil, false
	}
	return o.Launched, true
}

// HasLaunched returns a boolean if a field has been set.
func (o *TaskResult) HasLaunched() bool {
	if o != nil && !isNil(o.Launched) {
		return true
	}

	return false
}

// SetLaunched gets a reference to the given time.Time and assigns it to the Launched field.
func (o *TaskResult) SetLaunched(v time.Time) {
	o.Launched = &v
}

// GetCompletionStatus returns the CompletionStatus field value if set, zero value otherwise.
func (o *TaskResult) GetCompletionStatus() string {
	if o == nil || isNil(o.CompletionStatus) {
		var ret string
		return ret
	}
	return *o.CompletionStatus
}

// GetCompletionStatusOk returns a tuple with the CompletionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetCompletionStatusOk() (*string, bool) {
	if o == nil || isNil(o.CompletionStatus) {
		return nil, false
	}
	return o.CompletionStatus, true
}

// HasCompletionStatus returns a boolean if a field has been set.
func (o *TaskResult) HasCompletionStatus() bool {
	if o != nil && !isNil(o.CompletionStatus) {
		return true
	}

	return false
}

// SetCompletionStatus gets a reference to the given string and assigns it to the CompletionStatus field.
func (o *TaskResult) SetCompletionStatus(v string) {
	o.CompletionStatus = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *TaskResult) GetMessages() []TaskResultMessagesInner {
	if o == nil || isNil(o.Messages) {
		var ret []TaskResultMessagesInner
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetMessagesOk() ([]TaskResultMessagesInner, bool) {
	if o == nil || isNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *TaskResult) HasMessages() bool {
	if o != nil && !isNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []TaskResultMessagesInner and assigns it to the Messages field.
func (o *TaskResult) SetMessages(v []TaskResultMessagesInner) {
	o.Messages = v
}

// GetReturns returns the Returns field value if set, zero value otherwise.
func (o *TaskResult) GetReturns() []TaskResultReturnsInner {
	if o == nil || isNil(o.Returns) {
		var ret []TaskResultReturnsInner
		return ret
	}
	return o.Returns
}

// GetReturnsOk returns a tuple with the Returns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetReturnsOk() ([]TaskResultReturnsInner, bool) {
	if o == nil || isNil(o.Returns) {
		return nil, false
	}
	return o.Returns, true
}

// HasReturns returns a boolean if a field has been set.
func (o *TaskResult) HasReturns() bool {
	if o != nil && !isNil(o.Returns) {
		return true
	}

	return false
}

// SetReturns gets a reference to the given []TaskResultReturnsInner and assigns it to the Returns field.
func (o *TaskResult) SetReturns(v []TaskResultReturnsInner) {
	o.Returns = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *TaskResult) GetAttributes() DynamicSchemaEto {
	if o == nil || isNil(o.Attributes) {
		var ret DynamicSchemaEto
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetAttributesOk() (*DynamicSchemaEto, bool) {
	if o == nil || isNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *TaskResult) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given DynamicSchemaEto and assigns it to the Attributes field.
func (o *TaskResult) SetAttributes(v DynamicSchemaEto) {
	o.Attributes = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *TaskResult) GetProgress() string {
	if o == nil || isNil(o.Progress) {
		var ret string
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResult) GetProgressOk() (*string, bool) {
	if o == nil || isNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *TaskResult) HasProgress() bool {
	if o != nil && !isNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given string and assigns it to the Progress field.
func (o *TaskResult) SetProgress(v string) {
	o.Progress = &v
}

func (o TaskResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.ParentName) {
		toSerialize["parentName"] = o.ParentName
	}
	if !isNil(o.Launcher) {
		toSerialize["launcher"] = o.Launcher
	}
	if !isNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !isNil(o.Launched) {
		toSerialize["launched"] = o.Launched
	}
	if !isNil(o.CompletionStatus) {
		toSerialize["completionStatus"] = o.CompletionStatus
	}
	if !isNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !isNil(o.Returns) {
		toSerialize["returns"] = o.Returns
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TaskResult) UnmarshalJSON(bytes []byte) (err error) {
	varTaskResult := _TaskResult{}

	if err = json.Unmarshal(bytes, &varTaskResult); err == nil {
		*o = TaskResult(varTaskResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "parentName")
		delete(additionalProperties, "launcher")
		delete(additionalProperties, "completed")
		delete(additionalProperties, "launched")
		delete(additionalProperties, "completionStatus")
		delete(additionalProperties, "messages")
		delete(additionalProperties, "returns")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "progress")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTaskResult struct {
	value *TaskResult
	isSet bool
}

func (v NullableTaskResult) Get() *TaskResult {
	return v.value
}

func (v *NullableTaskResult) Set(val *TaskResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskResult(val *TaskResult) *NullableTaskResult {
	return &NullableTaskResult{value: val, isSet: true}
}

func (v NullableTaskResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


