/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// OrgSystemNotificationConfig struct for OrgSystemNotificationConfig
type OrgSystemNotificationConfig struct {
	Notifications []Notification `json:"notifications,omitempty"`
	RecipientType *string `json:"recipientType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSystemNotificationConfig OrgSystemNotificationConfig

// NewOrgSystemNotificationConfig instantiates a new OrgSystemNotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSystemNotificationConfig() *OrgSystemNotificationConfig {
	this := OrgSystemNotificationConfig{}
	return &this
}

// NewOrgSystemNotificationConfigWithDefaults instantiates a new OrgSystemNotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSystemNotificationConfigWithDefaults() *OrgSystemNotificationConfig {
	this := OrgSystemNotificationConfig{}
	return &this
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *OrgSystemNotificationConfig) GetNotifications() []Notification {
	if o == nil || isNil(o.Notifications) {
		var ret []Notification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSystemNotificationConfig) GetNotificationsOk() ([]Notification, bool) {
	if o == nil || isNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *OrgSystemNotificationConfig) HasNotifications() bool {
	if o != nil && !isNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []Notification and assigns it to the Notifications field.
func (o *OrgSystemNotificationConfig) SetNotifications(v []Notification) {
	o.Notifications = v
}

// GetRecipientType returns the RecipientType field value if set, zero value otherwise.
func (o *OrgSystemNotificationConfig) GetRecipientType() string {
	if o == nil || isNil(o.RecipientType) {
		var ret string
		return ret
	}
	return *o.RecipientType
}

// GetRecipientTypeOk returns a tuple with the RecipientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSystemNotificationConfig) GetRecipientTypeOk() (*string, bool) {
	if o == nil || isNil(o.RecipientType) {
		return nil, false
	}
	return o.RecipientType, true
}

// HasRecipientType returns a boolean if a field has been set.
func (o *OrgSystemNotificationConfig) HasRecipientType() bool {
	if o != nil && !isNil(o.RecipientType) {
		return true
	}

	return false
}

// SetRecipientType gets a reference to the given string and assigns it to the RecipientType field.
func (o *OrgSystemNotificationConfig) SetRecipientType(v string) {
	o.RecipientType = &v
}

func (o OrgSystemNotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !isNil(o.RecipientType) {
		toSerialize["recipientType"] = o.RecipientType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OrgSystemNotificationConfig) UnmarshalJSON(bytes []byte) (err error) {
	varOrgSystemNotificationConfig := _OrgSystemNotificationConfig{}

	if err = json.Unmarshal(bytes, &varOrgSystemNotificationConfig); err == nil {
		*o = OrgSystemNotificationConfig(varOrgSystemNotificationConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "notifications")
		delete(additionalProperties, "recipientType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSystemNotificationConfig struct {
	value *OrgSystemNotificationConfig
	isSet bool
}

func (v NullableOrgSystemNotificationConfig) Get() *OrgSystemNotificationConfig {
	return v.value
}

func (v *NullableOrgSystemNotificationConfig) Set(val *OrgSystemNotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSystemNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSystemNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSystemNotificationConfig(val *OrgSystemNotificationConfig) *NullableOrgSystemNotificationConfig {
	return &NullableOrgSystemNotificationConfig{value: val, isSet: true}
}

func (v NullableOrgSystemNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSystemNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


