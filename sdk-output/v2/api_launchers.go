/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// LaunchersApiService LaunchersApi service
type LaunchersApiService service

type ApiGetLauncherRequest struct {
	ctx context.Context
	ApiService *LaunchersApiService
	launcherId string
}

func (r ApiGetLauncherRequest) Execute() (*Launcher, *http.Response, error) {
	return r.ApiService.GetLauncherExecute(r)
}

/*
GetLauncher Retrieves the details of the launcher.

Retrieves the details of the launcher.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param launcherId ID of a launcher.
 @return ApiGetLauncherRequest
*/
func (a *LaunchersApiService) GetLauncher(ctx context.Context, launcherId string) ApiGetLauncherRequest {
	return ApiGetLauncherRequest{
		ApiService: a,
		ctx: ctx,
		launcherId: launcherId,
	}
}

// Execute executes the request
//  @return Launcher
func (a *LaunchersApiService) GetLauncherExecute(r ApiGetLauncherRequest) (*Launcher, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Launcher
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LaunchersApiService.GetLauncher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/launchers/{launcherId}"
	localVarPath = strings.Replace(localVarPath, "{"+"launcherId"+"}", url.PathEscape(parameterToString(r.launcherId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLogLauncherClickRequest struct {
	ctx context.Context
	ApiService *LaunchersApiService
	launcherId string
}

func (r ApiLogLauncherClickRequest) Execute() (*http.Response, error) {
	return r.ApiService.LogLauncherClickExecute(r)
}

/*
LogLauncherClick Records a launcher click.

Increments internal 'click' statistics for the launcher.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param launcherId ID of a launcher.
 @return ApiLogLauncherClickRequest
*/
func (a *LaunchersApiService) LogLauncherClick(ctx context.Context, launcherId string) ApiLogLauncherClickRequest {
	return ApiLogLauncherClickRequest{
		ApiService: a,
		ctx: ctx,
		launcherId: launcherId,
	}
}

// Execute executes the request
func (a *LaunchersApiService) LogLauncherClickExecute(r ApiLogLauncherClickRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LaunchersApiService.LogLauncherClick")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/launchers/{launcherId}/click"
	localVarPath = strings.Replace(localVarPath, "{"+"launcherId"+"}", url.PathEscape(parameterToString(r.launcherId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateLauncherRequest struct {
	ctx context.Context
	ApiService *LaunchersApiService
	launcherId string
	launcherEto *LauncherEto
}

// Launcher attributes to be updated.
func (r ApiUpdateLauncherRequest) LauncherEto(launcherEto LauncherEto) ApiUpdateLauncherRequest {
	r.launcherEto = &launcherEto
	return r
}

func (r ApiUpdateLauncherRequest) Execute() (*Launcher, *http.Response, error) {
	return r.ApiService.UpdateLauncherExecute(r)
}

/*
UpdateLauncher Updates one or more attributes of a launcher.

Updates one or more attributes of a launcher.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param launcherId ID of a launcher.
 @return ApiUpdateLauncherRequest
*/
func (a *LaunchersApiService) UpdateLauncher(ctx context.Context, launcherId string) ApiUpdateLauncherRequest {
	return ApiUpdateLauncherRequest{
		ApiService: a,
		ctx: ctx,
		launcherId: launcherId,
	}
}

// Execute executes the request
//  @return Launcher
func (a *LaunchersApiService) UpdateLauncherExecute(r ApiUpdateLauncherRequest) (*Launcher, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Launcher
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LaunchersApiService.UpdateLauncher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/launchers/{launcherId}"
	localVarPath = strings.Replace(localVarPath, "{"+"launcherId"+"}", url.PathEscape(parameterToString(r.launcherId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.launcherEto == nil {
		return localVarReturnValue, nil, reportError("launcherEto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.launcherEto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
