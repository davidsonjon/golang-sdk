/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// Account struct for Account
type Account struct {
	AccountId *string `json:"accountId,omitempty"`
	Application *AccountApplication `json:"application,omitempty"`
	Attributes *AccountAttributes `json:"attributes,omitempty"`
	Authoritative *bool `json:"authoritative,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Features []string `json:"features,omitempty"`
	Id *string `json:"id,omitempty"`
	Identity *AccountIdentity `json:"identity,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	Meta *AccountMeta `json:"meta,omitempty"`
	Name *string `json:"name,omitempty"`
	NativeIdentity *string `json:"nativeIdentity,omitempty"`
	PendingAccessRequestIds []string `json:"pendingAccessRequestIds,omitempty"`
	Schema *string `json:"schema,omitempty"`
	SupportsPasswordChange *bool `json:"supportsPasswordChange,omitempty"`
	SystemAccount *bool `json:"systemAccount,omitempty"`
	Uncorrelated *bool `json:"uncorrelated,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Account Account

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Account) GetAccountId() string {
	if o == nil || isNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountIdOk() (*string, bool) {
	if o == nil || isNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Account) HasAccountId() bool {
	if o != nil && !isNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Account) SetAccountId(v string) {
	o.AccountId = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *Account) GetApplication() AccountApplication {
	if o == nil || isNil(o.Application) {
		var ret AccountApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetApplicationOk() (*AccountApplication, bool) {
	if o == nil || isNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *Account) HasApplication() bool {
	if o != nil && !isNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given AccountApplication and assigns it to the Application field.
func (o *Account) SetApplication(v AccountApplication) {
	o.Application = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Account) GetAttributes() AccountAttributes {
	if o == nil || isNil(o.Attributes) {
		var ret AccountAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAttributesOk() (*AccountAttributes, bool) {
	if o == nil || isNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Account) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given AccountAttributes and assigns it to the Attributes field.
func (o *Account) SetAttributes(v AccountAttributes) {
	o.Attributes = &v
}

// GetAuthoritative returns the Authoritative field value if set, zero value otherwise.
func (o *Account) GetAuthoritative() bool {
	if o == nil || isNil(o.Authoritative) {
		var ret bool
		return ret
	}
	return *o.Authoritative
}

// GetAuthoritativeOk returns a tuple with the Authoritative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAuthoritativeOk() (*bool, bool) {
	if o == nil || isNil(o.Authoritative) {
		return nil, false
	}
	return o.Authoritative, true
}

// HasAuthoritative returns a boolean if a field has been set.
func (o *Account) HasAuthoritative() bool {
	if o != nil && !isNil(o.Authoritative) {
		return true
	}

	return false
}

// SetAuthoritative gets a reference to the given bool and assigns it to the Authoritative field.
func (o *Account) SetAuthoritative(v bool) {
	o.Authoritative = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Account) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Account) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Account) SetDescription(v string) {
	o.Description = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Account) GetDisabled() bool {
	if o == nil || isNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Account) HasDisabled() bool {
	if o != nil && !isNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Account) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Account) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Account) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Account) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *Account) GetFeatures() []string {
	if o == nil || isNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetFeaturesOk() ([]string, bool) {
	if o == nil || isNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *Account) HasFeatures() bool {
	if o != nil && !isNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *Account) SetFeatures(v []string) {
	o.Features = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Account) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Account) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Account) SetId(v string) {
	o.Id = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *Account) GetIdentity() AccountIdentity {
	if o == nil || isNil(o.Identity) {
		var ret AccountIdentity
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIdentityOk() (*AccountIdentity, bool) {
	if o == nil || isNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *Account) HasIdentity() bool {
	if o != nil && !isNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given AccountIdentity and assigns it to the Identity field.
func (o *Account) SetIdentity(v AccountIdentity) {
	o.Identity = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Account) GetLocked() bool {
	if o == nil || isNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetLockedOk() (*bool, bool) {
	if o == nil || isNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Account) HasLocked() bool {
	if o != nil && !isNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Account) SetLocked(v bool) {
	o.Locked = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Account) GetMeta() AccountMeta {
	if o == nil || isNil(o.Meta) {
		var ret AccountMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMetaOk() (*AccountMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Account) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given AccountMeta and assigns it to the Meta field.
func (o *Account) SetMeta(v AccountMeta) {
	o.Meta = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Account) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Account) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Account) SetName(v string) {
	o.Name = &v
}

// GetNativeIdentity returns the NativeIdentity field value if set, zero value otherwise.
func (o *Account) GetNativeIdentity() string {
	if o == nil || isNil(o.NativeIdentity) {
		var ret string
		return ret
	}
	return *o.NativeIdentity
}

// GetNativeIdentityOk returns a tuple with the NativeIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetNativeIdentityOk() (*string, bool) {
	if o == nil || isNil(o.NativeIdentity) {
		return nil, false
	}
	return o.NativeIdentity, true
}

// HasNativeIdentity returns a boolean if a field has been set.
func (o *Account) HasNativeIdentity() bool {
	if o != nil && !isNil(o.NativeIdentity) {
		return true
	}

	return false
}

// SetNativeIdentity gets a reference to the given string and assigns it to the NativeIdentity field.
func (o *Account) SetNativeIdentity(v string) {
	o.NativeIdentity = &v
}

// GetPendingAccessRequestIds returns the PendingAccessRequestIds field value if set, zero value otherwise.
func (o *Account) GetPendingAccessRequestIds() []string {
	if o == nil || isNil(o.PendingAccessRequestIds) {
		var ret []string
		return ret
	}
	return o.PendingAccessRequestIds
}

// GetPendingAccessRequestIdsOk returns a tuple with the PendingAccessRequestIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetPendingAccessRequestIdsOk() ([]string, bool) {
	if o == nil || isNil(o.PendingAccessRequestIds) {
		return nil, false
	}
	return o.PendingAccessRequestIds, true
}

// HasPendingAccessRequestIds returns a boolean if a field has been set.
func (o *Account) HasPendingAccessRequestIds() bool {
	if o != nil && !isNil(o.PendingAccessRequestIds) {
		return true
	}

	return false
}

// SetPendingAccessRequestIds gets a reference to the given []string and assigns it to the PendingAccessRequestIds field.
func (o *Account) SetPendingAccessRequestIds(v []string) {
	o.PendingAccessRequestIds = v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *Account) GetSchema() string {
	if o == nil || isNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSchemaOk() (*string, bool) {
	if o == nil || isNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *Account) HasSchema() bool {
	if o != nil && !isNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *Account) SetSchema(v string) {
	o.Schema = &v
}

// GetSupportsPasswordChange returns the SupportsPasswordChange field value if set, zero value otherwise.
func (o *Account) GetSupportsPasswordChange() bool {
	if o == nil || isNil(o.SupportsPasswordChange) {
		var ret bool
		return ret
	}
	return *o.SupportsPasswordChange
}

// GetSupportsPasswordChangeOk returns a tuple with the SupportsPasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSupportsPasswordChangeOk() (*bool, bool) {
	if o == nil || isNil(o.SupportsPasswordChange) {
		return nil, false
	}
	return o.SupportsPasswordChange, true
}

// HasSupportsPasswordChange returns a boolean if a field has been set.
func (o *Account) HasSupportsPasswordChange() bool {
	if o != nil && !isNil(o.SupportsPasswordChange) {
		return true
	}

	return false
}

// SetSupportsPasswordChange gets a reference to the given bool and assigns it to the SupportsPasswordChange field.
func (o *Account) SetSupportsPasswordChange(v bool) {
	o.SupportsPasswordChange = &v
}

// GetSystemAccount returns the SystemAccount field value if set, zero value otherwise.
func (o *Account) GetSystemAccount() bool {
	if o == nil || isNil(o.SystemAccount) {
		var ret bool
		return ret
	}
	return *o.SystemAccount
}

// GetSystemAccountOk returns a tuple with the SystemAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSystemAccountOk() (*bool, bool) {
	if o == nil || isNil(o.SystemAccount) {
		return nil, false
	}
	return o.SystemAccount, true
}

// HasSystemAccount returns a boolean if a field has been set.
func (o *Account) HasSystemAccount() bool {
	if o != nil && !isNil(o.SystemAccount) {
		return true
	}

	return false
}

// SetSystemAccount gets a reference to the given bool and assigns it to the SystemAccount field.
func (o *Account) SetSystemAccount(v bool) {
	o.SystemAccount = &v
}

// GetUncorrelated returns the Uncorrelated field value if set, zero value otherwise.
func (o *Account) GetUncorrelated() bool {
	if o == nil || isNil(o.Uncorrelated) {
		var ret bool
		return ret
	}
	return *o.Uncorrelated
}

// GetUncorrelatedOk returns a tuple with the Uncorrelated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUncorrelatedOk() (*bool, bool) {
	if o == nil || isNil(o.Uncorrelated) {
		return nil, false
	}
	return o.Uncorrelated, true
}

// HasUncorrelated returns a boolean if a field has been set.
func (o *Account) HasUncorrelated() bool {
	if o != nil && !isNil(o.Uncorrelated) {
		return true
	}

	return false
}

// SetUncorrelated gets a reference to the given bool and assigns it to the Uncorrelated field.
func (o *Account) SetUncorrelated(v bool) {
	o.Uncorrelated = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Account) GetUuid() string {
	if o == nil || isNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUuidOk() (*string, bool) {
	if o == nil || isNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Account) HasUuid() bool {
	if o != nil && !isNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Account) SetUuid(v string) {
	o.Uuid = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !isNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.Authoritative) {
		toSerialize["authoritative"] = o.Authoritative
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	if !isNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.NativeIdentity) {
		toSerialize["nativeIdentity"] = o.NativeIdentity
	}
	if !isNil(o.PendingAccessRequestIds) {
		toSerialize["pendingAccessRequestIds"] = o.PendingAccessRequestIds
	}
	if !isNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !isNil(o.SupportsPasswordChange) {
		toSerialize["supportsPasswordChange"] = o.SupportsPasswordChange
	}
	if !isNil(o.SystemAccount) {
		toSerialize["systemAccount"] = o.SystemAccount
	}
	if !isNil(o.Uncorrelated) {
		toSerialize["uncorrelated"] = o.Uncorrelated
	}
	if !isNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Account) UnmarshalJSON(bytes []byte) (err error) {
	varAccount := _Account{}

	if err = json.Unmarshal(bytes, &varAccount); err == nil {
		*o = Account(varAccount)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accountId")
		delete(additionalProperties, "application")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "authoritative")
		delete(additionalProperties, "description")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "features")
		delete(additionalProperties, "id")
		delete(additionalProperties, "identity")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nativeIdentity")
		delete(additionalProperties, "pendingAccessRequestIds")
		delete(additionalProperties, "schema")
		delete(additionalProperties, "supportsPasswordChange")
		delete(additionalProperties, "systemAccount")
		delete(additionalProperties, "uncorrelated")
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


