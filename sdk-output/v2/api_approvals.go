/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ApprovalsApiService ApprovalsApi service
type ApprovalsApiService service

type ApiApproveAccessRequestRequest struct {
	ctx context.Context
	ApiService *ApprovalsApiService
	approvalId string
	commentEto *CommentEto
}

// Reviewer&#39;s comment.
func (r ApiApproveAccessRequestRequest) CommentEto(commentEto CommentEto) ApiApproveAccessRequestRequest {
	r.commentEto = &commentEto
	return r
}

func (r ApiApproveAccessRequestRequest) Execute() (*Approval, *http.Response, error) {
	return r.ApiService.ApproveAccessRequestExecute(r)
}

/*
ApproveAccessRequest Approves an access request.

Approves an access request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param approvalId ID of an access request approval.
 @return ApiApproveAccessRequestRequest
*/
func (a *ApprovalsApiService) ApproveAccessRequest(ctx context.Context, approvalId string) ApiApproveAccessRequestRequest {
	return ApiApproveAccessRequestRequest{
		ApiService: a,
		ctx: ctx,
		approvalId: approvalId,
	}
}

// Execute executes the request
//  @return Approval
func (a *ApprovalsApiService) ApproveAccessRequestExecute(r ApiApproveAccessRequestRequest) (*Approval, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Approval
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApprovalsApiService.ApproveAccessRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/approvals/{approvalId}/approve-request"
	localVarPath = strings.Replace(localVarPath, "{"+"approvalId"+"}", url.PathEscape(parameterToString(r.approvalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.commentEto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiForwardAccessRequestApprovalRequest struct {
	ctx context.Context
	ApiService *ApprovalsApiService
	approvalId string
	forwardApprovalEto *ForwardApprovalEto
}

// Information about the forwarded approval.
func (r ApiForwardAccessRequestApprovalRequest) ForwardApprovalEto(forwardApprovalEto ForwardApprovalEto) ApiForwardAccessRequestApprovalRequest {
	r.forwardApprovalEto = &forwardApprovalEto
	return r
}

func (r ApiForwardAccessRequestApprovalRequest) Execute() (*Approval, *http.Response, error) {
	return r.ApiService.ForwardAccessRequestApprovalExecute(r)
}

/*
ForwardAccessRequestApproval Forwards an access request approval.

Forwards an access request approval to a new owner.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param approvalId ID of an access request approval.
 @return ApiForwardAccessRequestApprovalRequest
*/
func (a *ApprovalsApiService) ForwardAccessRequestApproval(ctx context.Context, approvalId string) ApiForwardAccessRequestApprovalRequest {
	return ApiForwardAccessRequestApprovalRequest{
		ApiService: a,
		ctx: ctx,
		approvalId: approvalId,
	}
}

// Execute executes the request
//  @return Approval
func (a *ApprovalsApiService) ForwardAccessRequestApprovalExecute(r ApiForwardAccessRequestApprovalRequest) (*Approval, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Approval
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApprovalsApiService.ForwardAccessRequestApproval")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/approvals/{approvalId}/forward"
	localVarPath = strings.Replace(localVarPath, "{"+"approvalId"+"}", url.PathEscape(parameterToString(r.approvalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.forwardApprovalEto == nil {
		return localVarReturnValue, nil, reportError("forwardApprovalEto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.forwardApprovalEto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccessRequestApprovalRequest struct {
	ctx context.Context
	ApiService *ApprovalsApiService
	sort *string
	offset *int32
	limit *int32
}

// One or more attributes on which to sort, each separated by a &#39;,&#39;. Prefix with a minus sign (ex. -dateCreated) for descending sort.
func (r ApiListAccessRequestApprovalRequest) Sort(sort string) ApiListAccessRequestApprovalRequest {
	r.sort = &sort
	return r
}

// Paging offset.
func (r ApiListAccessRequestApprovalRequest) Offset(offset int32) ApiListAccessRequestApprovalRequest {
	r.offset = &offset
	return r
}

// Paging limit.
func (r ApiListAccessRequestApprovalRequest) Limit(limit int32) ApiListAccessRequestApprovalRequest {
	r.limit = &limit
	return r
}

func (r ApiListAccessRequestApprovalRequest) Execute() ([]Approval, *http.Response, error) {
	return r.ApiService.ListAccessRequestApprovalExecute(r)
}

/*
ListAccessRequestApproval Lists the approvals.

Lists the access request approvals.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAccessRequestApprovalRequest
*/
func (a *ApprovalsApiService) ListAccessRequestApproval(ctx context.Context) ApiListAccessRequestApprovalRequest {
	return ApiListAccessRequestApprovalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Approval
func (a *ApprovalsApiService) ListAccessRequestApprovalExecute(r ApiListAccessRequestApprovalRequest) ([]Approval, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Approval
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApprovalsApiService.ListAccessRequestApproval")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/approvals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRejectAccessRequestRequest struct {
	ctx context.Context
	ApiService *ApprovalsApiService
	approvalId string
	commentEto *CommentEto
}

// Reason about the approval rejection.
func (r ApiRejectAccessRequestRequest) CommentEto(commentEto CommentEto) ApiRejectAccessRequestRequest {
	r.commentEto = &commentEto
	return r
}

func (r ApiRejectAccessRequestRequest) Execute() (*Approval, *http.Response, error) {
	return r.ApiService.RejectAccessRequestExecute(r)
}

/*
RejectAccessRequest Rejects an access request.

Rejects an access request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param approvalId ID of an access request approval.
 @return ApiRejectAccessRequestRequest
*/
func (a *ApprovalsApiService) RejectAccessRequest(ctx context.Context, approvalId string) ApiRejectAccessRequestRequest {
	return ApiRejectAccessRequestRequest{
		ApiService: a,
		ctx: ctx,
		approvalId: approvalId,
	}
}

// Execute executes the request
//  @return Approval
func (a *ApprovalsApiService) RejectAccessRequestExecute(r ApiRejectAccessRequestRequest) (*Approval, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Approval
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApprovalsApiService.RejectAccessRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/approvals/{approvalId}/reject-request"
	localVarPath = strings.Replace(localVarPath, "{"+"approvalId"+"}", url.PathEscape(parameterToString(r.approvalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.commentEto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
