/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// Notification struct for Notification
type Notification struct {
	Type *string `json:"type,omitempty"`
	ByEmail *bool `json:"byEmail,omitempty"`
	Thresholds *NotificationThresholds `json:"thresholds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Notification Notification

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification() *Notification {
	this := Notification{}
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Notification) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Notification) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Notification) SetType(v string) {
	o.Type = &v
}

// GetByEmail returns the ByEmail field value if set, zero value otherwise.
func (o *Notification) GetByEmail() bool {
	if o == nil || isNil(o.ByEmail) {
		var ret bool
		return ret
	}
	return *o.ByEmail
}

// GetByEmailOk returns a tuple with the ByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetByEmailOk() (*bool, bool) {
	if o == nil || isNil(o.ByEmail) {
		return nil, false
	}
	return o.ByEmail, true
}

// HasByEmail returns a boolean if a field has been set.
func (o *Notification) HasByEmail() bool {
	if o != nil && !isNil(o.ByEmail) {
		return true
	}

	return false
}

// SetByEmail gets a reference to the given bool and assigns it to the ByEmail field.
func (o *Notification) SetByEmail(v bool) {
	o.ByEmail = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *Notification) GetThresholds() NotificationThresholds {
	if o == nil || isNil(o.Thresholds) {
		var ret NotificationThresholds
		return ret
	}
	return *o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetThresholdsOk() (*NotificationThresholds, bool) {
	if o == nil || isNil(o.Thresholds) {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *Notification) HasThresholds() bool {
	if o != nil && !isNil(o.Thresholds) {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given NotificationThresholds and assigns it to the Thresholds field.
func (o *Notification) SetThresholds(v NotificationThresholds) {
	o.Thresholds = &v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.ByEmail) {
		toSerialize["byEmail"] = o.ByEmail
	}
	if !isNil(o.Thresholds) {
		toSerialize["thresholds"] = o.Thresholds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Notification) UnmarshalJSON(bytes []byte) (err error) {
	varNotification := _Notification{}

	if err = json.Unmarshal(bytes, &varNotification); err == nil {
		*o = Notification(varNotification)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "byEmail")
		delete(additionalProperties, "thresholds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


