/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// IdentityEto One or more attributes of an identity.
type IdentityEto struct {
	EncryptionKey *string `json:"encryptionKey,omitempty"`
	EncryptionCheck *string `json:"encryptionCheck,omitempty"`
	// Alternate authentication type.
	AltAuthVia *string `json:"altAuthVia,omitempty"`
	AltAuthViaIntegrationData *string `json:"altAuthViaIntegrationData,omitempty"`
	// Alternate phone.
	AltPhone *string `json:"altPhone,omitempty"`
	// Alternate email.
	AltEmail *string `json:"altEmail,omitempty"`
	IdentityFlags *IdentityEtoIdentityFlags `json:"identityFlags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityEto IdentityEto

// NewIdentityEto instantiates a new IdentityEto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityEto() *IdentityEto {
	this := IdentityEto{}
	return &this
}

// NewIdentityEtoWithDefaults instantiates a new IdentityEto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityEtoWithDefaults() *IdentityEto {
	this := IdentityEto{}
	return &this
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *IdentityEto) GetEncryptionKey() string {
	if o == nil || isNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEto) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *IdentityEto) HasEncryptionKey() bool {
	if o != nil && !isNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *IdentityEto) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetEncryptionCheck returns the EncryptionCheck field value if set, zero value otherwise.
func (o *IdentityEto) GetEncryptionCheck() string {
	if o == nil || isNil(o.EncryptionCheck) {
		var ret string
		return ret
	}
	return *o.EncryptionCheck
}

// GetEncryptionCheckOk returns a tuple with the EncryptionCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEto) GetEncryptionCheckOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionCheck) {
		return nil, false
	}
	return o.EncryptionCheck, true
}

// HasEncryptionCheck returns a boolean if a field has been set.
func (o *IdentityEto) HasEncryptionCheck() bool {
	if o != nil && !isNil(o.EncryptionCheck) {
		return true
	}

	return false
}

// SetEncryptionCheck gets a reference to the given string and assigns it to the EncryptionCheck field.
func (o *IdentityEto) SetEncryptionCheck(v string) {
	o.EncryptionCheck = &v
}

// GetAltAuthVia returns the AltAuthVia field value if set, zero value otherwise.
func (o *IdentityEto) GetAltAuthVia() string {
	if o == nil || isNil(o.AltAuthVia) {
		var ret string
		return ret
	}
	return *o.AltAuthVia
}

// GetAltAuthViaOk returns a tuple with the AltAuthVia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEto) GetAltAuthViaOk() (*string, bool) {
	if o == nil || isNil(o.AltAuthVia) {
		return nil, false
	}
	return o.AltAuthVia, true
}

// HasAltAuthVia returns a boolean if a field has been set.
func (o *IdentityEto) HasAltAuthVia() bool {
	if o != nil && !isNil(o.AltAuthVia) {
		return true
	}

	return false
}

// SetAltAuthVia gets a reference to the given string and assigns it to the AltAuthVia field.
func (o *IdentityEto) SetAltAuthVia(v string) {
	o.AltAuthVia = &v
}

// GetAltAuthViaIntegrationData returns the AltAuthViaIntegrationData field value if set, zero value otherwise.
func (o *IdentityEto) GetAltAuthViaIntegrationData() string {
	if o == nil || isNil(o.AltAuthViaIntegrationData) {
		var ret string
		return ret
	}
	return *o.AltAuthViaIntegrationData
}

// GetAltAuthViaIntegrationDataOk returns a tuple with the AltAuthViaIntegrationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEto) GetAltAuthViaIntegrationDataOk() (*string, bool) {
	if o == nil || isNil(o.AltAuthViaIntegrationData) {
		return nil, false
	}
	return o.AltAuthViaIntegrationData, true
}

// HasAltAuthViaIntegrationData returns a boolean if a field has been set.
func (o *IdentityEto) HasAltAuthViaIntegrationData() bool {
	if o != nil && !isNil(o.AltAuthViaIntegrationData) {
		return true
	}

	return false
}

// SetAltAuthViaIntegrationData gets a reference to the given string and assigns it to the AltAuthViaIntegrationData field.
func (o *IdentityEto) SetAltAuthViaIntegrationData(v string) {
	o.AltAuthViaIntegrationData = &v
}

// GetAltPhone returns the AltPhone field value if set, zero value otherwise.
func (o *IdentityEto) GetAltPhone() string {
	if o == nil || isNil(o.AltPhone) {
		var ret string
		return ret
	}
	return *o.AltPhone
}

// GetAltPhoneOk returns a tuple with the AltPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEto) GetAltPhoneOk() (*string, bool) {
	if o == nil || isNil(o.AltPhone) {
		return nil, false
	}
	return o.AltPhone, true
}

// HasAltPhone returns a boolean if a field has been set.
func (o *IdentityEto) HasAltPhone() bool {
	if o != nil && !isNil(o.AltPhone) {
		return true
	}

	return false
}

// SetAltPhone gets a reference to the given string and assigns it to the AltPhone field.
func (o *IdentityEto) SetAltPhone(v string) {
	o.AltPhone = &v
}

// GetAltEmail returns the AltEmail field value if set, zero value otherwise.
func (o *IdentityEto) GetAltEmail() string {
	if o == nil || isNil(o.AltEmail) {
		var ret string
		return ret
	}
	return *o.AltEmail
}

// GetAltEmailOk returns a tuple with the AltEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEto) GetAltEmailOk() (*string, bool) {
	if o == nil || isNil(o.AltEmail) {
		return nil, false
	}
	return o.AltEmail, true
}

// HasAltEmail returns a boolean if a field has been set.
func (o *IdentityEto) HasAltEmail() bool {
	if o != nil && !isNil(o.AltEmail) {
		return true
	}

	return false
}

// SetAltEmail gets a reference to the given string and assigns it to the AltEmail field.
func (o *IdentityEto) SetAltEmail(v string) {
	o.AltEmail = &v
}

// GetIdentityFlags returns the IdentityFlags field value if set, zero value otherwise.
func (o *IdentityEto) GetIdentityFlags() IdentityEtoIdentityFlags {
	if o == nil || isNil(o.IdentityFlags) {
		var ret IdentityEtoIdentityFlags
		return ret
	}
	return *o.IdentityFlags
}

// GetIdentityFlagsOk returns a tuple with the IdentityFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEto) GetIdentityFlagsOk() (*IdentityEtoIdentityFlags, bool) {
	if o == nil || isNil(o.IdentityFlags) {
		return nil, false
	}
	return o.IdentityFlags, true
}

// HasIdentityFlags returns a boolean if a field has been set.
func (o *IdentityEto) HasIdentityFlags() bool {
	if o != nil && !isNil(o.IdentityFlags) {
		return true
	}

	return false
}

// SetIdentityFlags gets a reference to the given IdentityEtoIdentityFlags and assigns it to the IdentityFlags field.
func (o *IdentityEto) SetIdentityFlags(v IdentityEtoIdentityFlags) {
	o.IdentityFlags = &v
}

func (o IdentityEto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EncryptionKey) {
		toSerialize["encryptionKey"] = o.EncryptionKey
	}
	if !isNil(o.EncryptionCheck) {
		toSerialize["encryptionCheck"] = o.EncryptionCheck
	}
	if !isNil(o.AltAuthVia) {
		toSerialize["altAuthVia"] = o.AltAuthVia
	}
	if !isNil(o.AltAuthViaIntegrationData) {
		toSerialize["altAuthViaIntegrationData"] = o.AltAuthViaIntegrationData
	}
	if !isNil(o.AltPhone) {
		toSerialize["altPhone"] = o.AltPhone
	}
	if !isNil(o.AltEmail) {
		toSerialize["altEmail"] = o.AltEmail
	}
	if !isNil(o.IdentityFlags) {
		toSerialize["identityFlags"] = o.IdentityFlags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityEto) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityEto := _IdentityEto{}

	if err = json.Unmarshal(bytes, &varIdentityEto); err == nil {
		*o = IdentityEto(varIdentityEto)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "encryptionKey")
		delete(additionalProperties, "encryptionCheck")
		delete(additionalProperties, "altAuthVia")
		delete(additionalProperties, "altAuthViaIntegrationData")
		delete(additionalProperties, "altPhone")
		delete(additionalProperties, "altEmail")
		delete(additionalProperties, "identityFlags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityEto struct {
	value *IdentityEto
	isSet bool
}

func (v NullableIdentityEto) Get() *IdentityEto {
	return v.value
}

func (v *NullableIdentityEto) Set(val *IdentityEto) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityEto) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityEto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityEto(val *IdentityEto) *NullableIdentityEto {
	return &NullableIdentityEto{value: val, isSet: true}
}

func (v NullableIdentityEto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityEto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


