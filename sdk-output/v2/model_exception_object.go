/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointv2sdk

import (
	"encoding/json"
)

// ExceptionObject struct for ExceptionObject
type ExceptionObject struct {
	Code int32 `json:"code"`
	Message string `json:"message"`
	Errors []ExceptionObjectErrorsInner `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExceptionObject ExceptionObject

// NewExceptionObject instantiates a new ExceptionObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExceptionObject(code int32, message string) *ExceptionObject {
	this := ExceptionObject{}
	this.Code = code
	this.Message = message
	return &this
}

// NewExceptionObjectWithDefaults instantiates a new ExceptionObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExceptionObjectWithDefaults() *ExceptionObject {
	this := ExceptionObject{}
	return &this
}

// GetCode returns the Code field value
func (o *ExceptionObject) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ExceptionObject) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ExceptionObject) SetCode(v int32) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *ExceptionObject) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ExceptionObject) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ExceptionObject) SetMessage(v string) {
	o.Message = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ExceptionObject) GetErrors() []ExceptionObjectErrorsInner {
	if o == nil || isNil(o.Errors) {
		var ret []ExceptionObjectErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExceptionObject) GetErrorsOk() ([]ExceptionObjectErrorsInner, bool) {
	if o == nil || isNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ExceptionObject) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ExceptionObjectErrorsInner and assigns it to the Errors field.
func (o *ExceptionObject) SetErrors(v []ExceptionObjectErrorsInner) {
	o.Errors = v
}

func (o ExceptionObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ExceptionObject) UnmarshalJSON(bytes []byte) (err error) {
	varExceptionObject := _ExceptionObject{}

	if err = json.Unmarshal(bytes, &varExceptionObject); err == nil {
		*o = ExceptionObject(varExceptionObject)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExceptionObject struct {
	value *ExceptionObject
	isSet bool
}

func (v NullableExceptionObject) Get() *ExceptionObject {
	return v.value
}

func (v *NullableExceptionObject) Set(val *ExceptionObject) {
	v.value = val
	v.isSet = true
}

func (v NullableExceptionObject) IsSet() bool {
	return v.isSet
}

func (v *NullableExceptionObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExceptionObject(val *ExceptionObject) *NullableExceptionObject {
	return &NullableExceptionObject{value: val, isSet: true}
}

func (v NullableExceptionObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExceptionObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


