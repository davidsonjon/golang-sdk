/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ExceptionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExceptionList{}

// ExceptionList struct for ExceptionList
type ExceptionList struct {
	// List of exceptions.
	Exceptions []Exception `json:"exceptions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExceptionList ExceptionList

// NewExceptionList instantiates a new ExceptionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExceptionList() *ExceptionList {
	this := ExceptionList{}
	return &this
}

// NewExceptionListWithDefaults instantiates a new ExceptionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExceptionListWithDefaults() *ExceptionList {
	this := ExceptionList{}
	return &this
}

// GetExceptions returns the Exceptions field value if set, zero value otherwise.
func (o *ExceptionList) GetExceptions() []Exception {
	if o == nil || isNil(o.Exceptions) {
		var ret []Exception
		return ret
	}
	return o.Exceptions
}

// GetExceptionsOk returns a tuple with the Exceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExceptionList) GetExceptionsOk() ([]Exception, bool) {
	if o == nil || isNil(o.Exceptions) {
		return nil, false
	}
	return o.Exceptions, true
}

// HasExceptions returns a boolean if a field has been set.
func (o *ExceptionList) HasExceptions() bool {
	if o != nil && !isNil(o.Exceptions) {
		return true
	}

	return false
}

// SetExceptions gets a reference to the given []Exception and assigns it to the Exceptions field.
func (o *ExceptionList) SetExceptions(v []Exception) {
	o.Exceptions = v
}

func (o ExceptionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExceptionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Exceptions) {
		toSerialize["exceptions"] = o.Exceptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExceptionList) UnmarshalJSON(bytes []byte) (err error) {
	varExceptionList := _ExceptionList{}

	if err = json.Unmarshal(bytes, &varExceptionList); err == nil {
		*o = ExceptionList(varExceptionList)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "exceptions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExceptionList struct {
	value *ExceptionList
	isSet bool
}

func (v NullableExceptionList) Get() *ExceptionList {
	return v.value
}

func (v *NullableExceptionList) Set(val *ExceptionList) {
	v.value = val
	v.isSet = true
}

func (v NullableExceptionList) IsSet() bool {
	return v.isSet
}

func (v *NullableExceptionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExceptionList(val *ExceptionList) *NullableExceptionList {
	return &NullableExceptionList{value: val, isSet: true}
}

func (v NullableExceptionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExceptionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


