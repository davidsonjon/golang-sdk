/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ArmRisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArmRisk{}

// ArmRisk An object containing the details of an ARM risk listing of the SOD violation reasons detected by this check.
type ArmRisk struct {
	// Risk Name
	Name *string `json:"name,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// List of risk owners' SAP usernames
	Owners []string `json:"owners,omitempty"`
	// URL to \"what if\" details in ARM
	ExternalReference *string `json:"externalReference,omitempty"`
	// Risk Rating
	Rating *string `json:"rating,omitempty"`
	// A map from business function codes to \"Left side\" or \"Right side\"
	BusinessFunctions *map[string]string `json:"businessFunctions,omitempty"`
	// List of risk approvers' SAP usernames
	Approvers []string `json:"approvers,omitempty"`
	// What was done to mitigate risks
	MitigatingControls *string `json:"mitigatingControls,omitempty"`
	// Recommendation on how to resolve risk
	CorrectionAdvice *string `json:"correctionAdvice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ArmRisk ArmRisk

// NewArmRisk instantiates a new ArmRisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArmRisk() *ArmRisk {
	this := ArmRisk{}
	return &this
}

// NewArmRiskWithDefaults instantiates a new ArmRisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArmRiskWithDefaults() *ArmRisk {
	this := ArmRisk{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArmRisk) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArmRisk) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArmRisk) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ArmRisk) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ArmRisk) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ArmRisk) SetDescription(v string) {
	o.Description = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *ArmRisk) GetOwners() []string {
	if o == nil || isNil(o.Owners) {
		var ret []string
		return ret
	}
	return o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetOwnersOk() ([]string, bool) {
	if o == nil || isNil(o.Owners) {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *ArmRisk) HasOwners() bool {
	if o != nil && !isNil(o.Owners) {
		return true
	}

	return false
}

// SetOwners gets a reference to the given []string and assigns it to the Owners field.
func (o *ArmRisk) SetOwners(v []string) {
	o.Owners = v
}

// GetExternalReference returns the ExternalReference field value if set, zero value otherwise.
func (o *ArmRisk) GetExternalReference() string {
	if o == nil || isNil(o.ExternalReference) {
		var ret string
		return ret
	}
	return *o.ExternalReference
}

// GetExternalReferenceOk returns a tuple with the ExternalReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetExternalReferenceOk() (*string, bool) {
	if o == nil || isNil(o.ExternalReference) {
		return nil, false
	}
	return o.ExternalReference, true
}

// HasExternalReference returns a boolean if a field has been set.
func (o *ArmRisk) HasExternalReference() bool {
	if o != nil && !isNil(o.ExternalReference) {
		return true
	}

	return false
}

// SetExternalReference gets a reference to the given string and assigns it to the ExternalReference field.
func (o *ArmRisk) SetExternalReference(v string) {
	o.ExternalReference = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *ArmRisk) GetRating() string {
	if o == nil || isNil(o.Rating) {
		var ret string
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetRatingOk() (*string, bool) {
	if o == nil || isNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *ArmRisk) HasRating() bool {
	if o != nil && !isNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given string and assigns it to the Rating field.
func (o *ArmRisk) SetRating(v string) {
	o.Rating = &v
}

// GetBusinessFunctions returns the BusinessFunctions field value if set, zero value otherwise.
func (o *ArmRisk) GetBusinessFunctions() map[string]string {
	if o == nil || isNil(o.BusinessFunctions) {
		var ret map[string]string
		return ret
	}
	return *o.BusinessFunctions
}

// GetBusinessFunctionsOk returns a tuple with the BusinessFunctions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetBusinessFunctionsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.BusinessFunctions) {
		return nil, false
	}
	return o.BusinessFunctions, true
}

// HasBusinessFunctions returns a boolean if a field has been set.
func (o *ArmRisk) HasBusinessFunctions() bool {
	if o != nil && !isNil(o.BusinessFunctions) {
		return true
	}

	return false
}

// SetBusinessFunctions gets a reference to the given map[string]string and assigns it to the BusinessFunctions field.
func (o *ArmRisk) SetBusinessFunctions(v map[string]string) {
	o.BusinessFunctions = &v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *ArmRisk) GetApprovers() []string {
	if o == nil || isNil(o.Approvers) {
		var ret []string
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetApproversOk() ([]string, bool) {
	if o == nil || isNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *ArmRisk) HasApprovers() bool {
	if o != nil && !isNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []string and assigns it to the Approvers field.
func (o *ArmRisk) SetApprovers(v []string) {
	o.Approvers = v
}

// GetMitigatingControls returns the MitigatingControls field value if set, zero value otherwise.
func (o *ArmRisk) GetMitigatingControls() string {
	if o == nil || isNil(o.MitigatingControls) {
		var ret string
		return ret
	}
	return *o.MitigatingControls
}

// GetMitigatingControlsOk returns a tuple with the MitigatingControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetMitigatingControlsOk() (*string, bool) {
	if o == nil || isNil(o.MitigatingControls) {
		return nil, false
	}
	return o.MitigatingControls, true
}

// HasMitigatingControls returns a boolean if a field has been set.
func (o *ArmRisk) HasMitigatingControls() bool {
	if o != nil && !isNil(o.MitigatingControls) {
		return true
	}

	return false
}

// SetMitigatingControls gets a reference to the given string and assigns it to the MitigatingControls field.
func (o *ArmRisk) SetMitigatingControls(v string) {
	o.MitigatingControls = &v
}

// GetCorrectionAdvice returns the CorrectionAdvice field value if set, zero value otherwise.
func (o *ArmRisk) GetCorrectionAdvice() string {
	if o == nil || isNil(o.CorrectionAdvice) {
		var ret string
		return ret
	}
	return *o.CorrectionAdvice
}

// GetCorrectionAdviceOk returns a tuple with the CorrectionAdvice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArmRisk) GetCorrectionAdviceOk() (*string, bool) {
	if o == nil || isNil(o.CorrectionAdvice) {
		return nil, false
	}
	return o.CorrectionAdvice, true
}

// HasCorrectionAdvice returns a boolean if a field has been set.
func (o *ArmRisk) HasCorrectionAdvice() bool {
	if o != nil && !isNil(o.CorrectionAdvice) {
		return true
	}

	return false
}

// SetCorrectionAdvice gets a reference to the given string and assigns it to the CorrectionAdvice field.
func (o *ArmRisk) SetCorrectionAdvice(v string) {
	o.CorrectionAdvice = &v
}

func (o ArmRisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArmRisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: name is readOnly
	// skip: description is readOnly
	// skip: owners is readOnly
	// skip: externalReference is readOnly
	// skip: rating is readOnly
	// skip: businessFunctions is readOnly
	// skip: approvers is readOnly
	// skip: mitigatingControls is readOnly
	// skip: correctionAdvice is readOnly

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArmRisk) UnmarshalJSON(bytes []byte) (err error) {
	varArmRisk := _ArmRisk{}

	if err = json.Unmarshal(bytes, &varArmRisk); err == nil {
		*o = ArmRisk(varArmRisk)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "owners")
		delete(additionalProperties, "externalReference")
		delete(additionalProperties, "rating")
		delete(additionalProperties, "businessFunctions")
		delete(additionalProperties, "approvers")
		delete(additionalProperties, "mitigatingControls")
		delete(additionalProperties, "correctionAdvice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArmRisk struct {
	value *ArmRisk
	isSet bool
}

func (v NullableArmRisk) Get() *ArmRisk {
	return v.value
}

func (v *NullableArmRisk) Set(val *ArmRisk) {
	v.value = val
	v.isSet = true
}

func (v NullableArmRisk) IsSet() bool {
	return v.isSet
}

func (v *NullableArmRisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArmRisk(val *ArmRisk) *NullableArmRisk {
	return &NullableArmRisk{value: val, isSet: true}
}

func (v NullableArmRisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArmRisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


