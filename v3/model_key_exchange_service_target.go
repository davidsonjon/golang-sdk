/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// KeyExchangeServiceTarget Type of key exchange.
type KeyExchangeServiceTarget string

// List of KeyExchangeServiceTarget
const (
	KEYEXCHANGESERVICETARGET_ARM KeyExchangeServiceTarget = "ARM"
)

// All allowed values of KeyExchangeServiceTarget enum
var AllowedKeyExchangeServiceTargetEnumValues = []KeyExchangeServiceTarget{
	"ARM",
}

func (v *KeyExchangeServiceTarget) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyExchangeServiceTarget(value)
	for _, existing := range AllowedKeyExchangeServiceTargetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyExchangeServiceTarget", value)
}

// NewKeyExchangeServiceTargetFromValue returns a pointer to a valid KeyExchangeServiceTarget
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyExchangeServiceTargetFromValue(v string) (*KeyExchangeServiceTarget, error) {
	ev := KeyExchangeServiceTarget(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyExchangeServiceTarget: valid values are %v", v, AllowedKeyExchangeServiceTargetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyExchangeServiceTarget) IsValid() bool {
	for _, existing := range AllowedKeyExchangeServiceTargetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyExchangeServiceTarget value
func (v KeyExchangeServiceTarget) Ptr() *KeyExchangeServiceTarget {
	return &v
}

type NullableKeyExchangeServiceTarget struct {
	value *KeyExchangeServiceTarget
	isSet bool
}

func (v NullableKeyExchangeServiceTarget) Get() *KeyExchangeServiceTarget {
	return v.value
}

func (v *NullableKeyExchangeServiceTarget) Set(val *KeyExchangeServiceTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyExchangeServiceTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyExchangeServiceTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyExchangeServiceTarget(val *KeyExchangeServiceTarget) *NullableKeyExchangeServiceTarget {
	return &NullableKeyExchangeServiceTarget{value: val, isSet: true}
}

func (v NullableKeyExchangeServiceTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyExchangeServiceTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

