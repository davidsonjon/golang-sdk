/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the TransformAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransformAllOf{}

// TransformAllOf The representation of an internally- or customer-defined transform.
type TransformAllOf struct {
	// Unique name of this transform
	Name string `json:"name"`
	// The type of transform operation
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _TransformAllOf TransformAllOf

// NewTransformAllOf instantiates a new TransformAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransformAllOf(name string, type_ string) *TransformAllOf {
	this := TransformAllOf{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewTransformAllOfWithDefaults instantiates a new TransformAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformAllOfWithDefaults() *TransformAllOf {
	this := TransformAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *TransformAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TransformAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TransformAllOf) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *TransformAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransformAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransformAllOf) SetType(v string) {
	o.Type = v
}

func (o TransformAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransformAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TransformAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varTransformAllOf := _TransformAllOf{}

	if err = json.Unmarshal(bytes, &varTransformAllOf); err == nil {
		*o = TransformAllOf(varTransformAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransformAllOf struct {
	value *TransformAllOf
	isSet bool
}

func (v NullableTransformAllOf) Get() *TransformAllOf {
	return v.value
}

func (v *NullableTransformAllOf) Set(val *TransformAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformAllOf(val *TransformAllOf) *NullableTransformAllOf {
	return &NullableTransformAllOf{value: val, isSet: true}
}

func (v NullableTransformAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


