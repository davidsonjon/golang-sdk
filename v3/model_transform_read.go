/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the TransformRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransformRead{}

// TransformRead struct for TransformRead
type TransformRead struct {
	Attributes TransformUpdateAttributes `json:"attributes"`
	// Unique name of this transform
	Name string `json:"name"`
	// The type of transform operation
	Type string `json:"type"`
	// Unique ID of this transform
	Id string `json:"id"`
	// Indicates whether this is an internal SailPoint-created transform or a customer-created transform
	Internal *bool `json:"internal,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TransformRead TransformRead

// NewTransformRead instantiates a new TransformRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransformRead(attributes TransformUpdateAttributes, name string, type_ string, id string) *TransformRead {
	this := TransformRead{}
	this.Attributes = attributes
	this.Name = name
	this.Type = type_
	this.Id = id
	var internal bool = false
	this.Internal = &internal
	return &this
}

// NewTransformReadWithDefaults instantiates a new TransformRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformReadWithDefaults() *TransformRead {
	this := TransformRead{}
	var internal bool = false
	this.Internal = &internal
	return &this
}

// GetAttributes returns the Attributes field value
func (o *TransformRead) GetAttributes() TransformUpdateAttributes {
	if o == nil {
		var ret TransformUpdateAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *TransformRead) GetAttributesOk() (*TransformUpdateAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *TransformRead) SetAttributes(v TransformUpdateAttributes) {
	o.Attributes = v
}

// GetName returns the Name field value
func (o *TransformRead) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TransformRead) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TransformRead) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *TransformRead) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransformRead) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransformRead) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *TransformRead) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransformRead) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransformRead) SetId(v string) {
	o.Id = v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *TransformRead) GetInternal() bool {
	if o == nil || isNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransformRead) GetInternalOk() (*bool, bool) {
	if o == nil || isNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *TransformRead) HasInternal() bool {
	if o != nil && !isNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *TransformRead) SetInternal(v bool) {
	o.Internal = &v
}

func (o TransformRead) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransformRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attributes"] = o.Attributes
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	if !isNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TransformRead) UnmarshalJSON(bytes []byte) (err error) {
	varTransformRead := _TransformRead{}

	if err = json.Unmarshal(bytes, &varTransformRead); err == nil {
		*o = TransformRead(varTransformRead)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "internal")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransformRead struct {
	value *TransformRead
	isSet bool
}

func (v NullableTransformRead) Get() *TransformRead {
	return v.value
}

func (v *NullableTransformRead) Set(val *TransformRead) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformRead) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformRead(val *TransformRead) *NullableTransformRead {
	return &NullableTransformRead{value: val, isSet: true}
}

func (v NullableTransformRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


