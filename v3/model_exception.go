/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"time"
)

// checks if the Exception type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Exception{}

// Exception struct for Exception
type Exception struct {
	// Id of a SOD exception.
	Id NullableString `json:"id,omitempty"`
	// The time when this SOD exception is created.
	Created NullableTime `json:"created,omitempty"`
	// The time when this SOD exception is modified.
	Modified NullableTime `json:"modified,omitempty"`
	SodPolicy *BaseReferenceDto `json:"sodPolicy,omitempty"`
	Identity *BaseReferenceDto `json:"identity,omitempty"`
	// The earliest date-time when this SOD exception is applicable.
	Start *time.Time `json:"start,omitempty"`
	// The last date-time when this SOD exception is applicable.
	End *time.Time `json:"end,omitempty"`
	// The business justification for the exception.
	BusinessJustification *string `json:"businessJustification,omitempty"`
	// The mitigating control for the exception.
	MitigatingControl *string `json:"mitigatingControl,omitempty"`
	AccessCriteria *ExceptionAccessCriteria `json:"accessCriteria,omitempty"`
	Origin *BaseReferenceDto `json:"origin,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Exception Exception

// NewException instantiates a new Exception object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewException() *Exception {
	this := Exception{}
	return &this
}

// NewExceptionWithDefaults instantiates a new Exception object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExceptionWithDefaults() *Exception {
	this := Exception{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Exception) GetId() string {
	if o == nil || isNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Exception) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Exception) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *Exception) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Exception) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Exception) UnsetId() {
	o.Id.Unset()
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Exception) GetCreated() time.Time {
	if o == nil || isNil(o.Created.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Exception) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// HasCreated returns a boolean if a field has been set.
func (o *Exception) HasCreated() bool {
	if o != nil && o.Created.IsSet() {
		return true
	}

	return false
}

// SetCreated gets a reference to the given NullableTime and assigns it to the Created field.
func (o *Exception) SetCreated(v time.Time) {
	o.Created.Set(&v)
}
// SetCreatedNil sets the value for Created to be an explicit nil
func (o *Exception) SetCreatedNil() {
	o.Created.Set(nil)
}

// UnsetCreated ensures that no value is present for Created, not even an explicit nil
func (o *Exception) UnsetCreated() {
	o.Created.Unset()
}

// GetModified returns the Modified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Exception) GetModified() time.Time {
	if o == nil || isNil(o.Modified.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Modified.Get()
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Exception) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modified.Get(), o.Modified.IsSet()
}

// HasModified returns a boolean if a field has been set.
func (o *Exception) HasModified() bool {
	if o != nil && o.Modified.IsSet() {
		return true
	}

	return false
}

// SetModified gets a reference to the given NullableTime and assigns it to the Modified field.
func (o *Exception) SetModified(v time.Time) {
	o.Modified.Set(&v)
}
// SetModifiedNil sets the value for Modified to be an explicit nil
func (o *Exception) SetModifiedNil() {
	o.Modified.Set(nil)
}

// UnsetModified ensures that no value is present for Modified, not even an explicit nil
func (o *Exception) UnsetModified() {
	o.Modified.Unset()
}

// GetSodPolicy returns the SodPolicy field value if set, zero value otherwise.
func (o *Exception) GetSodPolicy() BaseReferenceDto {
	if o == nil || isNil(o.SodPolicy) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.SodPolicy
}

// GetSodPolicyOk returns a tuple with the SodPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetSodPolicyOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.SodPolicy) {
		return nil, false
	}
	return o.SodPolicy, true
}

// HasSodPolicy returns a boolean if a field has been set.
func (o *Exception) HasSodPolicy() bool {
	if o != nil && !isNil(o.SodPolicy) {
		return true
	}

	return false
}

// SetSodPolicy gets a reference to the given BaseReferenceDto and assigns it to the SodPolicy field.
func (o *Exception) SetSodPolicy(v BaseReferenceDto) {
	o.SodPolicy = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *Exception) GetIdentity() BaseReferenceDto {
	if o == nil || isNil(o.Identity) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetIdentityOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *Exception) HasIdentity() bool {
	if o != nil && !isNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given BaseReferenceDto and assigns it to the Identity field.
func (o *Exception) SetIdentity(v BaseReferenceDto) {
	o.Identity = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Exception) GetStart() time.Time {
	if o == nil || isNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetStartOk() (*time.Time, bool) {
	if o == nil || isNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Exception) HasStart() bool {
	if o != nil && !isNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *Exception) SetStart(v time.Time) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Exception) GetEnd() time.Time {
	if o == nil || isNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetEndOk() (*time.Time, bool) {
	if o == nil || isNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Exception) HasEnd() bool {
	if o != nil && !isNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *Exception) SetEnd(v time.Time) {
	o.End = &v
}

// GetBusinessJustification returns the BusinessJustification field value if set, zero value otherwise.
func (o *Exception) GetBusinessJustification() string {
	if o == nil || isNil(o.BusinessJustification) {
		var ret string
		return ret
	}
	return *o.BusinessJustification
}

// GetBusinessJustificationOk returns a tuple with the BusinessJustification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetBusinessJustificationOk() (*string, bool) {
	if o == nil || isNil(o.BusinessJustification) {
		return nil, false
	}
	return o.BusinessJustification, true
}

// HasBusinessJustification returns a boolean if a field has been set.
func (o *Exception) HasBusinessJustification() bool {
	if o != nil && !isNil(o.BusinessJustification) {
		return true
	}

	return false
}

// SetBusinessJustification gets a reference to the given string and assigns it to the BusinessJustification field.
func (o *Exception) SetBusinessJustification(v string) {
	o.BusinessJustification = &v
}

// GetMitigatingControl returns the MitigatingControl field value if set, zero value otherwise.
func (o *Exception) GetMitigatingControl() string {
	if o == nil || isNil(o.MitigatingControl) {
		var ret string
		return ret
	}
	return *o.MitigatingControl
}

// GetMitigatingControlOk returns a tuple with the MitigatingControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetMitigatingControlOk() (*string, bool) {
	if o == nil || isNil(o.MitigatingControl) {
		return nil, false
	}
	return o.MitigatingControl, true
}

// HasMitigatingControl returns a boolean if a field has been set.
func (o *Exception) HasMitigatingControl() bool {
	if o != nil && !isNil(o.MitigatingControl) {
		return true
	}

	return false
}

// SetMitigatingControl gets a reference to the given string and assigns it to the MitigatingControl field.
func (o *Exception) SetMitigatingControl(v string) {
	o.MitigatingControl = &v
}

// GetAccessCriteria returns the AccessCriteria field value if set, zero value otherwise.
func (o *Exception) GetAccessCriteria() ExceptionAccessCriteria {
	if o == nil || isNil(o.AccessCriteria) {
		var ret ExceptionAccessCriteria
		return ret
	}
	return *o.AccessCriteria
}

// GetAccessCriteriaOk returns a tuple with the AccessCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetAccessCriteriaOk() (*ExceptionAccessCriteria, bool) {
	if o == nil || isNil(o.AccessCriteria) {
		return nil, false
	}
	return o.AccessCriteria, true
}

// HasAccessCriteria returns a boolean if a field has been set.
func (o *Exception) HasAccessCriteria() bool {
	if o != nil && !isNil(o.AccessCriteria) {
		return true
	}

	return false
}

// SetAccessCriteria gets a reference to the given ExceptionAccessCriteria and assigns it to the AccessCriteria field.
func (o *Exception) SetAccessCriteria(v ExceptionAccessCriteria) {
	o.AccessCriteria = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *Exception) GetOrigin() BaseReferenceDto {
	if o == nil || isNil(o.Origin) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exception) GetOriginOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *Exception) HasOrigin() bool {
	if o != nil && !isNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given BaseReferenceDto and assigns it to the Origin field.
func (o *Exception) SetOrigin(v BaseReferenceDto) {
	o.Origin = &v
}

func (o Exception) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Exception) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Created.IsSet() {
		toSerialize["created"] = o.Created.Get()
	}
	if o.Modified.IsSet() {
		toSerialize["modified"] = o.Modified.Get()
	}
	if !isNil(o.SodPolicy) {
		toSerialize["sodPolicy"] = o.SodPolicy
	}
	if !isNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	if !isNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !isNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !isNil(o.BusinessJustification) {
		toSerialize["businessJustification"] = o.BusinessJustification
	}
	if !isNil(o.MitigatingControl) {
		toSerialize["mitigatingControl"] = o.MitigatingControl
	}
	if !isNil(o.AccessCriteria) {
		toSerialize["accessCriteria"] = o.AccessCriteria
	}
	if !isNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Exception) UnmarshalJSON(bytes []byte) (err error) {
	varException := _Exception{}

	if err = json.Unmarshal(bytes, &varException); err == nil {
		*o = Exception(varException)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "sodPolicy")
		delete(additionalProperties, "identity")
		delete(additionalProperties, "start")
		delete(additionalProperties, "end")
		delete(additionalProperties, "businessJustification")
		delete(additionalProperties, "mitigatingControl")
		delete(additionalProperties, "accessCriteria")
		delete(additionalProperties, "origin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableException struct {
	value *Exception
	isSet bool
}

func (v NullableException) Get() *Exception {
	return v.value
}

func (v *NullableException) Set(val *Exception) {
	v.value = val
	v.isSet = true
}

func (v NullableException) IsSet() bool {
	return v.isSet
}

func (v *NullableException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableException(val *Exception) *NullableException {
	return &NullableException{value: val, isSet: true}
}

func (v NullableException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


