/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the IdpDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdpDetails{}

// IdpDetails struct for IdpDetails
type IdpDetails struct {
	// Federation protocol role
	Role *string `json:"role,omitempty"`
	// An entity ID is a globally unique name for a SAML entity, either an Identity Provider (IDP) or a Service Provider (SP).
	EntityId *string `json:"entityId,omitempty"`
	// Defines the binding used for the SAML flow. Used with IDP configurations.
	Binding *string `json:"binding,omitempty"`
	// Specifies the SAML authentication method to use. Used with IDP configurations.
	AuthContext *string `json:"authContext,omitempty"`
	// The IDP logout URL. Used with IDP configurations.
	LogoutUrl *string `json:"logoutUrl,omitempty"`
	// Determines if the configured AuthnContext should be used or the default. Used with IDP configurations.
	IncludeAuthContext *bool `json:"includeAuthContext,omitempty"`
	// The name id format to use. Used with IDP configurations.
	NameId *string `json:"nameId,omitempty"`
	JitConfiguration *JITConfiguration `json:"jitConfiguration,omitempty"`
	// The Base64-encoded certificate used by the IDP. Used with IDP configurations.
	Cert *string `json:"cert,omitempty"`
	// The IDP POST URL, used with IDP HTTP-POST bindings for IDP-initiated logins. Used with IDP configurations.
	LoginUrlPost *string `json:"loginUrlPost,omitempty"`
	// The IDP Redirect URL. Used with IDP configurations.
	LoginUrlRedirect *string `json:"loginUrlRedirect,omitempty"`
	// Return the saml Id for the given user, based on the IDN as SP settings of the org. Used with IDP configurations.
	MappingAttribute *string `json:"mappingAttribute,omitempty"`
	// The expiration date extracted from the certificate.
	CertificateExpirationDate *string `json:"certificateExpirationDate,omitempty"`
	// The name extracted from the certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdpDetails IdpDetails

// NewIdpDetails instantiates a new IdpDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpDetails() *IdpDetails {
	this := IdpDetails{}
	var includeAuthContext bool = false
	this.IncludeAuthContext = &includeAuthContext
	return &this
}

// NewIdpDetailsWithDefaults instantiates a new IdpDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpDetailsWithDefaults() *IdpDetails {
	this := IdpDetails{}
	var includeAuthContext bool = false
	this.IncludeAuthContext = &includeAuthContext
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *IdpDetails) GetRole() string {
	if o == nil || isNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetRoleOk() (*string, bool) {
	if o == nil || isNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *IdpDetails) HasRole() bool {
	if o != nil && !isNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *IdpDetails) SetRole(v string) {
	o.Role = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *IdpDetails) GetEntityId() string {
	if o == nil || isNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetEntityIdOk() (*string, bool) {
	if o == nil || isNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *IdpDetails) HasEntityId() bool {
	if o != nil && !isNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *IdpDetails) SetEntityId(v string) {
	o.EntityId = &v
}

// GetBinding returns the Binding field value if set, zero value otherwise.
func (o *IdpDetails) GetBinding() string {
	if o == nil || isNil(o.Binding) {
		var ret string
		return ret
	}
	return *o.Binding
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetBindingOk() (*string, bool) {
	if o == nil || isNil(o.Binding) {
		return nil, false
	}
	return o.Binding, true
}

// HasBinding returns a boolean if a field has been set.
func (o *IdpDetails) HasBinding() bool {
	if o != nil && !isNil(o.Binding) {
		return true
	}

	return false
}

// SetBinding gets a reference to the given string and assigns it to the Binding field.
func (o *IdpDetails) SetBinding(v string) {
	o.Binding = &v
}

// GetAuthContext returns the AuthContext field value if set, zero value otherwise.
func (o *IdpDetails) GetAuthContext() string {
	if o == nil || isNil(o.AuthContext) {
		var ret string
		return ret
	}
	return *o.AuthContext
}

// GetAuthContextOk returns a tuple with the AuthContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetAuthContextOk() (*string, bool) {
	if o == nil || isNil(o.AuthContext) {
		return nil, false
	}
	return o.AuthContext, true
}

// HasAuthContext returns a boolean if a field has been set.
func (o *IdpDetails) HasAuthContext() bool {
	if o != nil && !isNil(o.AuthContext) {
		return true
	}

	return false
}

// SetAuthContext gets a reference to the given string and assigns it to the AuthContext field.
func (o *IdpDetails) SetAuthContext(v string) {
	o.AuthContext = &v
}

// GetLogoutUrl returns the LogoutUrl field value if set, zero value otherwise.
func (o *IdpDetails) GetLogoutUrl() string {
	if o == nil || isNil(o.LogoutUrl) {
		var ret string
		return ret
	}
	return *o.LogoutUrl
}

// GetLogoutUrlOk returns a tuple with the LogoutUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetLogoutUrlOk() (*string, bool) {
	if o == nil || isNil(o.LogoutUrl) {
		return nil, false
	}
	return o.LogoutUrl, true
}

// HasLogoutUrl returns a boolean if a field has been set.
func (o *IdpDetails) HasLogoutUrl() bool {
	if o != nil && !isNil(o.LogoutUrl) {
		return true
	}

	return false
}

// SetLogoutUrl gets a reference to the given string and assigns it to the LogoutUrl field.
func (o *IdpDetails) SetLogoutUrl(v string) {
	o.LogoutUrl = &v
}

// GetIncludeAuthContext returns the IncludeAuthContext field value if set, zero value otherwise.
func (o *IdpDetails) GetIncludeAuthContext() bool {
	if o == nil || isNil(o.IncludeAuthContext) {
		var ret bool
		return ret
	}
	return *o.IncludeAuthContext
}

// GetIncludeAuthContextOk returns a tuple with the IncludeAuthContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetIncludeAuthContextOk() (*bool, bool) {
	if o == nil || isNil(o.IncludeAuthContext) {
		return nil, false
	}
	return o.IncludeAuthContext, true
}

// HasIncludeAuthContext returns a boolean if a field has been set.
func (o *IdpDetails) HasIncludeAuthContext() bool {
	if o != nil && !isNil(o.IncludeAuthContext) {
		return true
	}

	return false
}

// SetIncludeAuthContext gets a reference to the given bool and assigns it to the IncludeAuthContext field.
func (o *IdpDetails) SetIncludeAuthContext(v bool) {
	o.IncludeAuthContext = &v
}

// GetNameId returns the NameId field value if set, zero value otherwise.
func (o *IdpDetails) GetNameId() string {
	if o == nil || isNil(o.NameId) {
		var ret string
		return ret
	}
	return *o.NameId
}

// GetNameIdOk returns a tuple with the NameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetNameIdOk() (*string, bool) {
	if o == nil || isNil(o.NameId) {
		return nil, false
	}
	return o.NameId, true
}

// HasNameId returns a boolean if a field has been set.
func (o *IdpDetails) HasNameId() bool {
	if o != nil && !isNil(o.NameId) {
		return true
	}

	return false
}

// SetNameId gets a reference to the given string and assigns it to the NameId field.
func (o *IdpDetails) SetNameId(v string) {
	o.NameId = &v
}

// GetJitConfiguration returns the JitConfiguration field value if set, zero value otherwise.
func (o *IdpDetails) GetJitConfiguration() JITConfiguration {
	if o == nil || isNil(o.JitConfiguration) {
		var ret JITConfiguration
		return ret
	}
	return *o.JitConfiguration
}

// GetJitConfigurationOk returns a tuple with the JitConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetJitConfigurationOk() (*JITConfiguration, bool) {
	if o == nil || isNil(o.JitConfiguration) {
		return nil, false
	}
	return o.JitConfiguration, true
}

// HasJitConfiguration returns a boolean if a field has been set.
func (o *IdpDetails) HasJitConfiguration() bool {
	if o != nil && !isNil(o.JitConfiguration) {
		return true
	}

	return false
}

// SetJitConfiguration gets a reference to the given JITConfiguration and assigns it to the JitConfiguration field.
func (o *IdpDetails) SetJitConfiguration(v JITConfiguration) {
	o.JitConfiguration = &v
}

// GetCert returns the Cert field value if set, zero value otherwise.
func (o *IdpDetails) GetCert() string {
	if o == nil || isNil(o.Cert) {
		var ret string
		return ret
	}
	return *o.Cert
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetCertOk() (*string, bool) {
	if o == nil || isNil(o.Cert) {
		return nil, false
	}
	return o.Cert, true
}

// HasCert returns a boolean if a field has been set.
func (o *IdpDetails) HasCert() bool {
	if o != nil && !isNil(o.Cert) {
		return true
	}

	return false
}

// SetCert gets a reference to the given string and assigns it to the Cert field.
func (o *IdpDetails) SetCert(v string) {
	o.Cert = &v
}

// GetLoginUrlPost returns the LoginUrlPost field value if set, zero value otherwise.
func (o *IdpDetails) GetLoginUrlPost() string {
	if o == nil || isNil(o.LoginUrlPost) {
		var ret string
		return ret
	}
	return *o.LoginUrlPost
}

// GetLoginUrlPostOk returns a tuple with the LoginUrlPost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetLoginUrlPostOk() (*string, bool) {
	if o == nil || isNil(o.LoginUrlPost) {
		return nil, false
	}
	return o.LoginUrlPost, true
}

// HasLoginUrlPost returns a boolean if a field has been set.
func (o *IdpDetails) HasLoginUrlPost() bool {
	if o != nil && !isNil(o.LoginUrlPost) {
		return true
	}

	return false
}

// SetLoginUrlPost gets a reference to the given string and assigns it to the LoginUrlPost field.
func (o *IdpDetails) SetLoginUrlPost(v string) {
	o.LoginUrlPost = &v
}

// GetLoginUrlRedirect returns the LoginUrlRedirect field value if set, zero value otherwise.
func (o *IdpDetails) GetLoginUrlRedirect() string {
	if o == nil || isNil(o.LoginUrlRedirect) {
		var ret string
		return ret
	}
	return *o.LoginUrlRedirect
}

// GetLoginUrlRedirectOk returns a tuple with the LoginUrlRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetLoginUrlRedirectOk() (*string, bool) {
	if o == nil || isNil(o.LoginUrlRedirect) {
		return nil, false
	}
	return o.LoginUrlRedirect, true
}

// HasLoginUrlRedirect returns a boolean if a field has been set.
func (o *IdpDetails) HasLoginUrlRedirect() bool {
	if o != nil && !isNil(o.LoginUrlRedirect) {
		return true
	}

	return false
}

// SetLoginUrlRedirect gets a reference to the given string and assigns it to the LoginUrlRedirect field.
func (o *IdpDetails) SetLoginUrlRedirect(v string) {
	o.LoginUrlRedirect = &v
}

// GetMappingAttribute returns the MappingAttribute field value if set, zero value otherwise.
func (o *IdpDetails) GetMappingAttribute() string {
	if o == nil || isNil(o.MappingAttribute) {
		var ret string
		return ret
	}
	return *o.MappingAttribute
}

// GetMappingAttributeOk returns a tuple with the MappingAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetMappingAttributeOk() (*string, bool) {
	if o == nil || isNil(o.MappingAttribute) {
		return nil, false
	}
	return o.MappingAttribute, true
}

// HasMappingAttribute returns a boolean if a field has been set.
func (o *IdpDetails) HasMappingAttribute() bool {
	if o != nil && !isNil(o.MappingAttribute) {
		return true
	}

	return false
}

// SetMappingAttribute gets a reference to the given string and assigns it to the MappingAttribute field.
func (o *IdpDetails) SetMappingAttribute(v string) {
	o.MappingAttribute = &v
}

// GetCertificateExpirationDate returns the CertificateExpirationDate field value if set, zero value otherwise.
func (o *IdpDetails) GetCertificateExpirationDate() string {
	if o == nil || isNil(o.CertificateExpirationDate) {
		var ret string
		return ret
	}
	return *o.CertificateExpirationDate
}

// GetCertificateExpirationDateOk returns a tuple with the CertificateExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetCertificateExpirationDateOk() (*string, bool) {
	if o == nil || isNil(o.CertificateExpirationDate) {
		return nil, false
	}
	return o.CertificateExpirationDate, true
}

// HasCertificateExpirationDate returns a boolean if a field has been set.
func (o *IdpDetails) HasCertificateExpirationDate() bool {
	if o != nil && !isNil(o.CertificateExpirationDate) {
		return true
	}

	return false
}

// SetCertificateExpirationDate gets a reference to the given string and assigns it to the CertificateExpirationDate field.
func (o *IdpDetails) SetCertificateExpirationDate(v string) {
	o.CertificateExpirationDate = &v
}

// GetCertificateName returns the CertificateName field value if set, zero value otherwise.
func (o *IdpDetails) GetCertificateName() string {
	if o == nil || isNil(o.CertificateName) {
		var ret string
		return ret
	}
	return *o.CertificateName
}

// GetCertificateNameOk returns a tuple with the CertificateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpDetails) GetCertificateNameOk() (*string, bool) {
	if o == nil || isNil(o.CertificateName) {
		return nil, false
	}
	return o.CertificateName, true
}

// HasCertificateName returns a boolean if a field has been set.
func (o *IdpDetails) HasCertificateName() bool {
	if o != nil && !isNil(o.CertificateName) {
		return true
	}

	return false
}

// SetCertificateName gets a reference to the given string and assigns it to the CertificateName field.
func (o *IdpDetails) SetCertificateName(v string) {
	o.CertificateName = &v
}

func (o IdpDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdpDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !isNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !isNil(o.Binding) {
		toSerialize["binding"] = o.Binding
	}
	if !isNil(o.AuthContext) {
		toSerialize["authContext"] = o.AuthContext
	}
	if !isNil(o.LogoutUrl) {
		toSerialize["logoutUrl"] = o.LogoutUrl
	}
	if !isNil(o.IncludeAuthContext) {
		toSerialize["includeAuthContext"] = o.IncludeAuthContext
	}
	if !isNil(o.NameId) {
		toSerialize["nameId"] = o.NameId
	}
	if !isNil(o.JitConfiguration) {
		toSerialize["jitConfiguration"] = o.JitConfiguration
	}
	if !isNil(o.Cert) {
		toSerialize["cert"] = o.Cert
	}
	if !isNil(o.LoginUrlPost) {
		toSerialize["loginUrlPost"] = o.LoginUrlPost
	}
	if !isNil(o.LoginUrlRedirect) {
		toSerialize["loginUrlRedirect"] = o.LoginUrlRedirect
	}
	if !isNil(o.MappingAttribute) {
		toSerialize["mappingAttribute"] = o.MappingAttribute
	}
	if !isNil(o.CertificateExpirationDate) {
		toSerialize["certificateExpirationDate"] = o.CertificateExpirationDate
	}
	if !isNil(o.CertificateName) {
		toSerialize["certificateName"] = o.CertificateName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdpDetails) UnmarshalJSON(bytes []byte) (err error) {
	varIdpDetails := _IdpDetails{}

	if err = json.Unmarshal(bytes, &varIdpDetails); err == nil {
	*o = IdpDetails(varIdpDetails)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "role")
		delete(additionalProperties, "entityId")
		delete(additionalProperties, "binding")
		delete(additionalProperties, "authContext")
		delete(additionalProperties, "logoutUrl")
		delete(additionalProperties, "includeAuthContext")
		delete(additionalProperties, "nameId")
		delete(additionalProperties, "jitConfiguration")
		delete(additionalProperties, "cert")
		delete(additionalProperties, "loginUrlPost")
		delete(additionalProperties, "loginUrlRedirect")
		delete(additionalProperties, "mappingAttribute")
		delete(additionalProperties, "certificateExpirationDate")
		delete(additionalProperties, "certificateName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdpDetails struct {
	value *IdpDetails
	isSet bool
}

func (v NullableIdpDetails) Get() *IdpDetails {
	return v.value
}

func (v *NullableIdpDetails) Set(val *IdpDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpDetails(val *IdpDetails) *NullableIdpDetails {
	return &NullableIdpDetails{value: val, isSet: true}
}

func (v NullableIdpDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


