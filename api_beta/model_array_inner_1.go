/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)


// ArrayInner1 struct for ArrayInner1
type ArrayInner1 struct {
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ArrayInner1) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ArrayInner1)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ArrayInner1) MarshalJSON() ([]byte, error) {
	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableArrayInner1 struct {
	value *ArrayInner1
	isSet bool
}

func (v NullableArrayInner1) Get() *ArrayInner1 {
	return v.value
}

func (v *NullableArrayInner1) Set(val *ArrayInner1) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayInner1) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayInner1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayInner1(val *ArrayInner1) *NullableArrayInner1 {
	return &NullableArrayInner1{value: val, isSet: true}
}

func (v NullableArrayInner1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayInner1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


