/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"os"
)

// checks if the ImportEntitlementsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportEntitlementsRequest{}

// ImportEntitlementsRequest struct for ImportEntitlementsRequest
type ImportEntitlementsRequest struct {
	// The CSV file containing the source entitlements to aggregate.
	CsvFile **os.File `json:"csvFile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ImportEntitlementsRequest ImportEntitlementsRequest

// NewImportEntitlementsRequest instantiates a new ImportEntitlementsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportEntitlementsRequest() *ImportEntitlementsRequest {
	this := ImportEntitlementsRequest{}
	return &this
}

// NewImportEntitlementsRequestWithDefaults instantiates a new ImportEntitlementsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportEntitlementsRequestWithDefaults() *ImportEntitlementsRequest {
	this := ImportEntitlementsRequest{}
	return &this
}

// GetCsvFile returns the CsvFile field value if set, zero value otherwise.
func (o *ImportEntitlementsRequest) GetCsvFile() *os.File {
	if o == nil || isNil(o.CsvFile) {
		var ret *os.File
		return ret
	}
	return *o.CsvFile
}

// GetCsvFileOk returns a tuple with the CsvFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportEntitlementsRequest) GetCsvFileOk() (**os.File, bool) {
	if o == nil || isNil(o.CsvFile) {
		return nil, false
	}
	return o.CsvFile, true
}

// HasCsvFile returns a boolean if a field has been set.
func (o *ImportEntitlementsRequest) HasCsvFile() bool {
	if o != nil && !isNil(o.CsvFile) {
		return true
	}

	return false
}

// SetCsvFile gets a reference to the given *os.File and assigns it to the CsvFile field.
func (o *ImportEntitlementsRequest) SetCsvFile(v *os.File) {
	o.CsvFile = &v
}

func (o ImportEntitlementsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportEntitlementsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CsvFile) {
		toSerialize["csvFile"] = o.CsvFile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImportEntitlementsRequest) UnmarshalJSON(bytes []byte) (err error) {
	varImportEntitlementsRequest := _ImportEntitlementsRequest{}

	if err = json.Unmarshal(bytes, &varImportEntitlementsRequest); err == nil {
	*o = ImportEntitlementsRequest(varImportEntitlementsRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "csvFile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImportEntitlementsRequest struct {
	value *ImportEntitlementsRequest
	isSet bool
}

func (v NullableImportEntitlementsRequest) Get() *ImportEntitlementsRequest {
	return v.value
}

func (v *NullableImportEntitlementsRequest) Set(val *ImportEntitlementsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportEntitlementsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportEntitlementsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportEntitlementsRequest(val *ImportEntitlementsRequest) *NullableImportEntitlementsRequest {
	return &NullableImportEntitlementsRequest{value: val, isSet: true}
}

func (v NullableImportEntitlementsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportEntitlementsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


