/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the JsonPatchOperations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonPatchOperations{}

// JsonPatchOperations A limited JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)
type JsonPatchOperations struct {
	// The operation to be performed
	Op string `json:"op"`
	// A string representing the target path to an element to be affected by the operation
	Path string `json:"path"`
	Value *JsonPatchOperationsValue `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JsonPatchOperations JsonPatchOperations

// NewJsonPatchOperations instantiates a new JsonPatchOperations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonPatchOperations(op string, path string) *JsonPatchOperations {
	this := JsonPatchOperations{}
	this.Op = op
	this.Path = path
	return &this
}

// NewJsonPatchOperationsWithDefaults instantiates a new JsonPatchOperations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPatchOperationsWithDefaults() *JsonPatchOperations {
	this := JsonPatchOperations{}
	return &this
}

// GetOp returns the Op field value
func (o *JsonPatchOperations) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *JsonPatchOperations) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *JsonPatchOperations) SetOp(v string) {
	o.Op = v
}

// GetPath returns the Path field value
func (o *JsonPatchOperations) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *JsonPatchOperations) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *JsonPatchOperations) SetPath(v string) {
	o.Path = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *JsonPatchOperations) GetValue() JsonPatchOperationsValue {
	if o == nil || IsNil(o.Value) {
		var ret JsonPatchOperationsValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonPatchOperations) GetValueOk() (*JsonPatchOperationsValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *JsonPatchOperations) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given JsonPatchOperationsValue and assigns it to the Value field.
func (o *JsonPatchOperations) SetValue(v JsonPatchOperationsValue) {
	o.Value = &v
}

func (o JsonPatchOperations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonPatchOperations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["op"] = o.Op
	toSerialize["path"] = o.Path
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JsonPatchOperations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"op",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJsonPatchOperations := _JsonPatchOperations{}

	err = json.Unmarshal(data, &varJsonPatchOperations)

	if err != nil {
		return err
	}

	*o = JsonPatchOperations(varJsonPatchOperations)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "op")
		delete(additionalProperties, "path")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJsonPatchOperations struct {
	value *JsonPatchOperations
	isSet bool
}

func (v NullableJsonPatchOperations) Get() *JsonPatchOperations {
	return v.value
}

func (v *NullableJsonPatchOperations) Set(val *JsonPatchOperations) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonPatchOperations) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPatchOperations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPatchOperations(val *JsonPatchOperations) *NullableJsonPatchOperations {
	return &NullableJsonPatchOperations{value: val, isSet: true}
}

func (v NullableJsonPatchOperations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPatchOperations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


